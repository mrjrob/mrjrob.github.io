<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux配置代理</title>
      <link href="/2024/09/20/linux/linux%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
      <url>/2024/09/20/linux/linux%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>服务器有时候需要下载某些文件，但是没有代理，导致下载失败，所以需要配置代理</p></blockquote><h3 id="临时代理-只对当前终端会话有效，重启后需要重新设置"><a href="#临时代理-只对当前终端会话有效，重启后需要重新设置" class="headerlink" title="临时代理(只对当前终端会话有效，重启后需要重新设置)"></a>临时代理(只对当前终端会话有效，重启后需要重新设置)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 HTTP 代理</span></span><br><span class="line">export http_proxy=http://your_proxy_server:port</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 HTTPS 代理</span></span><br><span class="line">export https_proxy=http://your_proxy_server:port</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置例外地址</span></span><br><span class="line">export no_proxy=localhost,127.0.0.1,.localdomain.com</span><br></pre></td></tr></table></figure><h3 id="长久代理配置"><a href="#长久代理配置" class="headerlink" title="长久代理配置"></a>长久代理配置</h3><ol><li>编辑 &#x2F;etc&#x2F;environment 文件：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/environment</span><br></pre></td></tr></table></figure><ol start="2"><li>添加代理设置：<br>在文件末尾添加以下行（替换 your_proxy_server 和端口号）：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http_proxy=&quot;http://your_proxy_server:port&quot;</span><br><span class="line">https_proxy=&quot;http://your_proxy_server:port&quot;</span><br><span class="line">no_proxy=&quot;localhost,127.0.0.1,.localdomain.com&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>保存并退出：<br>按 Ctrl+O 保存文件，然后按 Ctrl+X 退出编辑器。</p></li><li><p>重启系统或重新登录：<br>为了让更改生效，可以重启系统或者重新登录终端。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux配置代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose 与Docker-Compose  使用</title>
      <link href="/2024/09/18/docker/docker%20compose%20%E4%B8%8Edocker-compose%20%20%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/09/18/docker/docker%20compose%20%E4%B8%8Edocker-compose%20%20%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="docker-compose-与docker-compose-使用"><a href="#docker-compose-与docker-compose-使用" class="headerlink" title="docker compose 与docker-compose  使用"></a>docker compose 与docker-compose  使用</h3><blockquote><p><a href="https://blog.csdn.net/weixin_44606481/article/details/132907520?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170374847316800188519843%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=170374847316800188519843&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-132907520-null-null.142%5Ev99%5Epc_search_result_base6&utm_term=%E5%AE%89%E8%A3%85docker%E5%92%8Cdocker-compose%20%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC&spm=1018.2226.3001.4187,%22%E6%90%9C%E7%B4%A2%E7%BD%91%E7%AB%99%22">原文链接</a></p></blockquote><h3 id="docker-compose-与docker-compose-差异"><a href="#docker-compose-与docker-compose-差异" class="headerlink" title="docker compose 与docker-compose 差异"></a>docker compose 与docker-compose 差异</h3><blockquote><p>实现方式:<br>docker-compose 是一个用 Python 编写的独立工具，它作为一个单独的可执行文件存在，如 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose 或<br>&#x2F;usr&#x2F;bin&#x2F;docker-compose。<br>docker compose 是用 Go 语言重写的，并且被设计为 Docker CLI (docker) 的一部分，作为其插件形式存在。<br>集成度:<br>docker compose 作为 Docker CLI 的一部分，意味着它与 Docker 平台有更紧密的集成，这可能会带来更好的一致性和稳定性。<br>docker-compose 作为一个独立的工具，需要单独安装，并且可能需要确保它的路径被添加到系统的 PATH 变量中以便使用。<br>命令调用:<br>使用 docker-compose 时，你需要直接调用 docker-compose 命令来执行相关操作，例如 docker-compose up。<br>使用 docker compose 时，命令会作为 docker 命令的一部分出现，例如 docker compose up。<br>版本与更新:<br>docker compose 通常是随 Docker CLI 一起更新的，因此当升级 Docker 时，docker compose 也会一同升级。<br>docker-compose 则可能需要单独进行版本管理及更新。<br>兼容性:<br>在某些情况下，由于 docker-compose 和 docker compose 在不同的时间点开发，可能存在一些细微的语法或行为上的差异。不过，大多数情况下，两者的<br>YAML 文件格式应该是兼容的。<br>随着 Docker 生态系统的演进，docker compose 逐渐成为了推荐使用的命令，因为它提供了更好的集成体验。然而，在某些旧的环境中或者特定的使用场景下，docker-compose<br>仍然会被使用。如果你正在开始一个新的项目或者更新现有的基础设施，建议使用 docker compose</p></blockquote><h4 id="Docker-Compose-定义"><a href="#Docker-Compose-定义" class="headerlink" title="Docker Compose 定义"></a>Docker Compose 定义</h4><blockquote><p>Docker Compose是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。<br>Compose 是 Docker 公司推出的一个工具软件，可以管理多个 Docker 容器组成一个应用。<br>你需要定义一个 YAML 格式的配置文件docker-compose.yml，写好多个容器之间的调用关系。然后，只要一个命令，就能同时启动&#x2F;关闭这些容器</p></blockquote><h4 id="Docker-Compose产生背景"><a href="#Docker-Compose产生背景" class="headerlink" title="Docker Compose产生背景"></a>Docker Compose产生背景</h4><blockquote><p>我们使用 Docker 的时候，定义 Dockerfile 文件，<br>然后使用 docker build、docker run 等命令操作容器。然而微服务架构的应用系统一般包含若干个微服务，<br>每个微服务一般都会部署多个实例，如果每个微服务都要手动启停，那么效率之低，维护量之大可想而知。<br>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，<br>您可以使用 YML 文件来配置应用程序需要的所有服务。<br>然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。<br>.Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器,Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行</p></blockquote><h4 id="Docker-Compose-使用步骤"><a href="#Docker-Compose-使用步骤" class="headerlink" title="Docker Compose 使用步骤"></a>Docker Compose 使用步骤</h4><ol><li>编写Dockerfile定义各个微服务应用并构建出对应的镜像文件dockerfile的使用，使用dockerfile部署springboot项目。</li><li>使用 docker-compose.yml 定义一个完整业务单元，安排好整体应用中的各个容器服务。</li><li>最后，执行docker-compose up命令 来启动并运行整个应用程序，完成一键部署上线</li></ol><h4 id="Docker-Compose-常用命令"><a href="#Docker-Compose-常用命令" class="headerlink" title="Docker Compose 常用命令"></a>Docker Compose 常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">docker --version #查看版本</span><br><span class="line"> </span><br><span class="line">docker-compose -h    # 查看帮助</span><br><span class="line"> </span><br><span class="line">docker-compose up    # 启动所有docker-compose服务</span><br><span class="line"> </span><br><span class="line">docker-compose up -d    # 启动所有docker-compose服务并后台运行</span><br><span class="line"> </span><br><span class="line">docker-compose down     # 停止并删除容器、网络、卷、镜像。</span><br><span class="line"> </span><br><span class="line">docker-compose exec  yml里面的服务id   # 进入容器实例内部  docker-compose exec docker-compose.yml文件中写的服务id /bin/bash</span><br><span class="line"> </span><br><span class="line">docker-compose ps      # 展示当前docker-compose编排过的运行的所有容器</span><br><span class="line"> </span><br><span class="line">docker-compose top       # 展示当前docker-compose编排过的容器进程</span><br><span class="line"> </span><br><span class="line">docker-compose logs  yml里面的服务id   # 查看容器输出日志</span><br><span class="line"> </span><br><span class="line">docker-compose config     # 检查配置</span><br><span class="line"> </span><br><span class="line">docker-compose config -q  # 检查配置，有问题才有输出</span><br><span class="line"> </span><br><span class="line">docker-compose restart   # 重启服务</span><br><span class="line"> </span><br><span class="line">docker-compose start     # 启动服务</span><br><span class="line"> </span><br><span class="line">docker-compose stop      # 停止服务</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Docker-Compose下载和卸载"><a href="#Docker-Compose下载和卸载" class="headerlink" title="Docker Compose下载和卸载"></a>Docker Compose下载和卸载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line"> curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启可执行权限</span></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line">docker-compose --version</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker-compose version 1.29.2, build 5becea4c</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果使用curl方式安装的，这样卸载即可</span></span><br><span class="line"> rm /usr/local/bin/docker-compose</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="仔细-sh-命令-出现-Permission-denied-错误"><a href="#仔细-sh-命令-出现-Permission-denied-错误" class="headerlink" title="仔细 sh 命令 出现  Permission denied 错误"></a>仔细 sh 命令 出现  Permission denied 错误</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod  777 ./*.sh</span><br></pre></td></tr></table></figure><h4 id="docker-filec-参考文件"><a href="#docker-filec-参考文件" class="headerlink" title="docker filec 参考文件"></a>docker filec 参考文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span>  <span class="comment"># Docker Compose 文件的版本号</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span>  <span class="comment"># 定义要运行的服务</span></span><br><span class="line">  <span class="attr">webapp:</span>  <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">webapp</span> <span class="comment"># 自定义的容器名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">webappimage</span>  <span class="comment"># 指定要使用的镜像名称</span></span><br><span class="line">    <span class="attr">build:</span>  <span class="comment"># 指定服务的镜像构建方式</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./webapp</span>  <span class="comment"># Dockerfile 文件的上下文路径</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile.dev</span>  <span class="comment"># 指定要使用的Dockerfile文件名</span></span><br><span class="line">    <span class="attr">ports:</span>  <span class="comment"># 定义容器端口与主机端口的映射关系</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span>  <span class="comment"># 挂载卷，将容器内的目录挂载到宿主机上</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/node_modules</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/app</span></span><br><span class="line">    <span class="attr">environment:</span>  <span class="comment"># 设置容器内的环境变量</span></span><br><span class="line">      <span class="attr">NODE_ENV:</span> <span class="string">development</span></span><br><span class="line">      <span class="attr">DEBUG:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">npm</span> <span class="string">start</span>  <span class="comment"># 覆盖容器启动的默认命令</span></span><br><span class="line">    <span class="attr">networks:</span>  <span class="comment"># 将服务连接到指定的网络</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">frontend</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span>  <span class="comment"># 定义容器的重启策略</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">database:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span>  <span class="comment"># 指定要使用的镜像名称</span></span><br><span class="line">    <span class="attr">ports:</span>  <span class="comment"># 定义容器端口与主机端口的映射关系</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span>  <span class="comment"># 设置容器内的环境变量</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">example</span></span><br><span class="line">    <span class="attr">healthcheck:</span>  <span class="comment"># 配置容器的健康检查</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;mysqladmin ping -h localhost&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">5s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span>  <span class="comment"># 定义自定义网络</span></span><br><span class="line">  <span class="attr">frontend:</span>  <span class="comment"># 前端网络</span></span><br><span class="line">  <span class="attr">backend:</span>   <span class="comment"># 后端网络</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker compose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器非Docker排查cpu 内存高排查方式</title>
      <link href="/2024/09/18/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BB%B4%E6%8A%A4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9D%9Edocker%E6%8E%92%E6%9F%A5cpu%20%E5%86%85%E5%AD%98%E9%AB%98%E6%8E%92%E6%9F%A5%E6%96%B9%E5%BC%8F/"/>
      <url>/2024/09/18/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BB%B4%E6%8A%A4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9D%9Edocker%E6%8E%92%E6%9F%A5cpu%20%E5%86%85%E5%AD%98%E9%AB%98%E6%8E%92%E6%9F%A5%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="linux-方案"><a href="#linux-方案" class="headerlink" title="linux 方案"></a>linux 方案</h3><h4 id="服务情况"><a href="#服务情况" class="headerlink" title="服务情况"></a>服务情况</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">top</span><br><span class="line"></span><br><span class="line">-- 排序方式</span><br><span class="line">P cpu 排序</span><br><span class="line">M 内存排序</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查询占用最高的线程"><a href="#查询占用最高的线程" class="headerlink" title="查询占用最高的线程"></a>查询占用最高的线程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -H -p PID</span><br></pre></td></tr></table></figure><h4 id="将线程tid转为16进制id"><a href="#将线程tid转为16进制id" class="headerlink" title="将线程tid转为16进制id"></a>将线程tid转为16进制id</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%x\n&quot; tid</span><br></pre></td></tr></table></figure><h4 id="查询线程堆栈信息"><a href="#查询线程堆栈信息" class="headerlink" title="查询线程堆栈信息"></a>查询线程堆栈信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jstack PID(进程pid) |grep tid(线程pid16进制) -A 50</span><br><span class="line">jstack 1 |grep i -B 10 -A 50 42</span><br></pre></td></tr></table></figure><h4 id="通过pid-查询到docker-容器"><a href="#通过pid-查询到docker-容器" class="headerlink" title="通过pid 查询到docker 容器"></a>通过pid 查询到docker 容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f &quot;&#123;&#123;.Id&#125;&#125; &#123;&#123;.State.Pid&#125;&#125; &#123;&#123;.Config.Hostname&#125;&#125;&quot;  $(docker ps -q) |grep &lt;pid&gt;</span><br></pre></td></tr></table></figure><h3 id="docker-方案"><a href="#docker-方案" class="headerlink" title="docker 方案"></a>docker 方案</h3><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;container_id&gt; /bin/bash</span><br></pre></td></tr></table></figure><h3 id="执行jstack命令"><a href="#执行jstack命令" class="headerlink" title="执行jstack命令"></a>执行jstack命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack PID &gt; threadDump.tdump</span><br></pre></td></tr></table></figure><h3 id="进程查询"><a href="#进程查询" class="headerlink" title="进程查询"></a>进程查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -elf | grep &lt;pid&gt;</span><br><span class="line">docker inspect -f&quot;&#123;&#123;.ld&#125;&#125; &#123;&#123;.state.Pid&#125;&#125; &#123;l.config.Hostname&#125;&#125;&quot; $(docker ps -q)grep </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rocketmq原理</title>
      <link href="/2024/09/13/mq/rocketMq%E5%8E%9F%E7%90%86/"/>
      <url>/2024/09/13/mq/rocketMq%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="RocketMQ-交换机与路由键的解释"><a href="#RocketMQ-交换机与路由键的解释" class="headerlink" title="RocketMQ 交换机与路由键的解释"></a>RocketMQ 交换机与路由键的解释</h3><h4 id="Producer-Group（生产者组）"><a href="#Producer-Group（生产者组）" class="headerlink" title="Producer Group（生产者组）"></a>Producer Group（生产者组）</h4><blockquote><p>用途：一组生产者实例的集合，用于管理生产者的生命周期和消息发送策略。<br>业务场景：适合需要管理多个生产者实例的场景，例如，分布式系统中的多个服务实例需要协同工作。</p></blockquote><h4 id="Consumer-Group（消费者组）"><a href="#Consumer-Group（消费者组）" class="headerlink" title="Consumer Group（消费者组）"></a>Consumer Group（消费者组）</h4><blockquote><p>用途：一组消费者实例的集合，用于管理消费者的生命周期和消息消费策略。<br>业务场景：适合需要管理多个消费者实例的场景，例如，分布式系统中的多个服务实例需要协同工作。</p></blockquote><h4 id="Topic（主题）"><a href="#Topic（主题）" class="headerlink" title="Topic（主题）"></a>Topic（主题）</h4><blockquote><p>用途：消息的主题，用于区分不同类型的消息。<br>业务场景：适合需要根据消息类型进行路由和消费的场景，例如，将不同类型的日志消息发送到不同的处理服务。</p></blockquote><h4 id="Tag（标签）"><a href="#Tag（标签）" class="headerlink" title="Tag（标签）"></a>Tag（标签）</h4><blockquote><p>用途：消息的标签，用于进一步细分消息类型。<br>业务场景：适合需要根据消息的详细类型进行过滤和路由的场景，例如，将不同类型的通知消息（如邮件通知、短信通知）发送到不同的处理队列。</p></blockquote><h4 id="Broker（代理）"><a href="#Broker（代理）" class="headerlink" title="Broker（代理）"></a>Broker（代理）</h4><p>用途：消息的存储和转发节点，负责存储消息并转发给消费者。<br>业务场景：适合需要高可用和高性能的消息存储和转发场景，例如，分布式系统中的消息中间件。</p><h4 id="Message-Store（消息存储）"><a href="#Message-Store（消息存储）" class="headerlink" title="Message Store（消息存储）"></a>Message Store（消息存储）</h4><p>用途：消息的实际存储组件，负责持久化消息数据。<br>业务场景：适合需要持久化消息数据的场景，例如，需要保证消息不丢失的情况。</p><h4 id="Tag-概念"><a href="#Tag-概念" class="headerlink" title="Tag 概念"></a>Tag 概念</h4><blockquote><p>用途：用于消息分类和过滤。<br>业务场景：适合需要根据消息的详细类型进行过滤和路由的场景，例如，将不同类型的通知消息（如邮件通知、短信通知）发送到不同的处理队列。<br>使用方法：<br>发布消息时可以指定 Tag。<br>消费消息时可以根据 Tag 进行过滤。</p></blockquote><h4 id="处理大量用户消息的方案"><a href="#处理大量用户消息的方案" class="headerlink" title="处理大量用户消息的方案"></a>处理大量用户消息的方案</h4><blockquote><p>方案概述<br>在处理大量用户消息时，可以使用 RocketMQ 的 Topic 和 Tag 来实现高效的消息生产和消费。具体步骤如下：<br>创建一个 Topic：创建一个共享的 Topic，例如 user_messages。<br>使用 Tag：为每个用户的消息设置不同的 Tag。<br>消费者订阅 Topic 并过滤 Tag：每个消费者订阅 Topic 并根据 Tag 过滤消息。<br>优势<br>灵活性：通过 Tag 可以灵活地对消息进行分类和过滤，使得每个用户的消息可以被正确地路由到对应的消费者。<br>可扩展性：可以轻松地添加新的 Tag 和消费者，以适应不断增长的用户量。<br>高可用性：RocketMQ 的 Broker 集群可以提供高可用的消息存储和转发服务，确保消息不会丢失。<br>具体实现<br>创建 Topic：创建一个共享的 Topic user_messages。<br>设置 Tag：为每个用户的消息设置不同的 Tag，例如 tag_user_001、tag_user_002 等。<br>消费者订阅：每个用户订阅 user_messages Topic，并根据各自的 Tag 过滤消息。<br>适用场景<br>大规模用户消息处理：例如，社交媒体平台需要向数百万用户发送个性化消息。<br>多租户系统：例如，企业级应用需要为不同部门或客户提供定制化消息服务。<br>日志处理系统：例如，将不同类型的日志消息发送到不同的处理服务。</p></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><blockquote><p>RocketMQ 提供了强大的消息处理能力，通过 Topic 和 Tag 可以高效地处理大量用户消息。这种方式不仅灵活，而且具有很高的可扩展性和可靠性，非常适合大规模用户消息处理的场景。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> rocketmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rocketmq原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端连接Rabbitmq</title>
      <link href="/2024/09/13/mq/%E5%89%8D%E7%AB%AF%E8%BF%9E%E6%8E%A5rabbitmq-web-stomps/"/>
      <url>/2024/09/13/mq/%E5%89%8D%E7%AB%AF%E8%BF%9E%E6%8E%A5rabbitmq-web-stomps/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="mq开启插件"><a href="#mq开启插件" class="headerlink" title="mq开启插件"></a>mq开启插件</h3><h4 id="docker-进入容器"><a href="#docker-进入容器" class="headerlink" title="docker 进入容器"></a>docker 进入容器</h4><blockquote><p>docker exec -it rabbitmq bash</p></blockquote><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_mqtt &amp;&amp;</span><br><span class="line">rabbitmq-plugins enable rabbitmq_web_mqtt &amp;&amp;</span><br><span class="line">rabbitmq-plugins enable rabbitmq_web_stomp &amp;&amp;</span><br><span class="line">rabbitmq-plugins enable rabbitmq_web_stomp_examples &amp;&amp;</span><br></pre></td></tr></table></figure><h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><blockquote><p>exit</p></blockquote><h4 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h4><blockquote><p>docker restart rabbitmq</p></blockquote><h4 id="前段代码测试连接"><a href="#前段代码测试连接" class="headerlink" title="前段代码测试连接"></a>前段代码测试连接</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>RabbitMQ WebSocket Test Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#messageDisplay</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 Stomp.js 库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>RabbitMQ WebSocket 测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;connectButton&quot;</span>&gt;</span>连接并订阅<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;messageDisplay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> client; <span class="comment">// Stomp 客户端对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">connectAndSubscribe</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">WebSocket</span> == <span class="string">&#x27;undefined&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持websocket&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;messageDisplay&#x27;</span>).<span class="property">innerText</span> += <span class="string">&quot;您的浏览器不支持WebSocket。\n&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// WebSocket URL</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> websocketUrl = <span class="string">&#x27;ws://192.168.0.159:15674/ws&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 初始化 WebSocket 对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(websocketUrl);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获得 Stomp 客户端对象</span></span></span><br><span class="line"><span class="language-javascript">        client = <span class="title class_">Stomp</span>.<span class="title function_">over</span>(ws);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        client.<span class="property">debug</span> = <span class="literal">null</span>; <span class="comment">// 关闭调试(控制台输出)</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义连接成功回调函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> on_connect = <span class="keyword">function</span> (<span class="params">frame</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;messageDisplay&#x27;</span>).<span class="property">innerText</span> += <span class="string">&quot;&gt;&gt;&gt;RabbitMQ已连接，测试正式开始\n&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 订阅队列</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">subscribeToQueue</span>(<span class="string">&#x27;e&#x27;</span>, &#123;<span class="string">&#x27;x-message-ttl&#x27;</span>: <span class="number">6000</span>, <span class="string">&#x27;x-max-length&#x27;</span>: <span class="number">10</span>&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;订阅成功&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;messageDisplay&#x27;</span>).<span class="property">innerText</span> += <span class="string">&quot;订阅成功。\n&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;订阅失败:&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;messageDisplay&#x27;</span>).<span class="property">innerText</span> += <span class="string">&quot;订阅失败。\n&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义错误时回调函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> on_error = <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接错误，请重试&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;messageDisplay&#x27;</span>).<span class="property">innerText</span> += <span class="string">&quot;连接错误，请重试。\n&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 尝试重新连接</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(connectAndSubscribe, <span class="number">5000</span>); <span class="comment">// 5秒后重试</span></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义断开连接时的回调函数</span></span></span><br><span class="line"><span class="language-javascript">        ws.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket 断开连接&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;messageDisplay&#x27;</span>).<span class="property">innerText</span> += <span class="string">&quot;WebSocket 断开连接。\n&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 尝试重新连接</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(connectAndSubscribe, <span class="number">5000</span>); <span class="comment">// 5秒后重试</span></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 订阅队列</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">subscribeToQueue</span>(<span class="params">queueName, <span class="variable language_">arguments</span></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                client.<span class="title function_">subscribe</span>(<span class="string">&#x27;/queue/&#x27;</span> + queueName, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> msg = data.<span class="property">body</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 验证消息是否匹配</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (msg === <span class="string">&quot;1&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 消费消息</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;messageDisplay&#x27;</span>).<span class="property">innerText</span> += <span class="string">&quot;收到数据：&quot;</span> + msg + <span class="string">&quot;\n&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 从队列中确认消息</span></span></span><br><span class="line"><span class="language-javascript">                        client.<span class="title function_">ack</span>(data.<span class="property">headers</span>[<span class="string">&#x27;message-id&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 不匹配，不消费消息</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;messageDisplay&#x27;</span>).<span class="property">innerText</span> += <span class="string">&quot;收到数据：&quot;</span> + msg + <span class="string">&quot;（未匹配）\n&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 不确认消息</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;, &#123;<span class="attr">ack</span>: <span class="string">&#x27;client&#x27;</span>, ...<span class="variable language_">arguments</span>&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 连接 RabbitMQ</span></span></span><br><span class="line"><span class="language-javascript">        client.<span class="title function_">connect</span>(<span class="string">&#x27;brt&#x27;</span>, <span class="string">&#x27;brt@s7d8fse!r23.&#x27;</span>, on_connect, on_error, <span class="string">&#x27;/&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;connectButton&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, connectAndSubscribe);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端连接rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rabbitmq配置和原理</title>
      <link href="/2024/09/11/mq/rabbtimq%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/09/11/mq/rabbtimq%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="rabbitmq-交换机与路由键的解释"><a href="#rabbitmq-交换机与路由键的解释" class="headerlink" title="rabbitmq 交换机与路由键的解释"></a>rabbitmq 交换机与路由键的解释</h3><h4 id="Direct-Exchange（直连交换机）"><a href="#Direct-Exchange（直连交换机）" class="headerlink" title="Direct Exchange（直连交换机）"></a>Direct Exchange（直连交换机）</h4><blockquote><p>用途：基于完全匹配的路由键（Routing Key）将消息发送到队列。<br>业务场景：适合一对一或多对一的消息路由场景，例如，将特定类型的消息路由到处理该类型消息的服务。<br>路由键使用：消息发送时带有特定的路由键，队列绑定到交换机时也指定了相同的路由键。只有当消息的路由键与队列绑定时指定的路由键完全相同时，消息才会被路由到队列。</p></blockquote><h4 id="Fanout-Exchange（扇形交换机）"><a href="#Fanout-Exchange（扇形交换机）" class="headerlink" title="Fanout Exchange（扇形交换机）"></a>Fanout Exchange（扇形交换机）</h4><blockquote><p>用途：将消息广播到所有绑定到该交换机的队列。<br>业务场景：适合一对多的消息广播场景，例如，将一条消息发送给多个订阅者。<br>路由键使用：Fanout 交换机不使用路由键，所有发送到该交换机的消息都会被复制并发送到所有绑定的队列。</p></blockquote><h4 id="Topic-Exchange（主题交换机）"><a href="#Topic-Exchange（主题交换机）" class="headerlink" title="Topic Exchange（主题交换机）"></a>Topic Exchange（主题交换机）</h4><blockquote><p>用途：基于模式匹配的路由键将消息发送到队列。<br>业务场景：适合一对多的消息路由场景，特别是当需要根据某种规则（如通配符）来路由消息时。<br>路由键使用：路由键可以使用通配符 *（匹配一个单词）和 #（匹配零个或多个单词）。队列绑定到交换机时指定的路由键模式决定了消息如何被路由。</p></blockquote><h4 id="Headers-Exchange（标头交换机）"><a href="#Headers-Exchange（标头交换机）" class="headerlink" title="Headers Exchange（标头交换机）"></a>Headers Exchange（标头交换机）</h4><blockquote><p>用途：基于消息的头部信息（Headers）来决定消息的路由。<br>业务场景：适合需要复杂消息匹配的场景，例如，当需要根据消息的多个属性来决定路由时。<br>路由键使用：Headers 交换机不使用路由键，而是使用消息头部的信息来进行匹配。</p></blockquote><h4 id="Default-Exchange（默认交换机）"><a href="#Default-Exchange（默认交换机）" class="headerlink" title="Default Exchange（默认交换机）"></a>Default Exchange（默认交换机）</h4><blockquote><p>用途：默认交换机没有名称，默认情况下，如果消息发布时不指定交换机，则会使用默认交换机。<br>业务场景：适用于简单的点对点通信场景。<br>路由键使用：路由键被解释为队列名称，消息会被路由到与路由键名称相同的队列。</p></blockquote><h4 id="队列中-Durable-与-Transient-区别"><a href="#队列中-Durable-与-Transient-区别" class="headerlink" title="队列中 Durable 与 Transient 区别"></a>队列中 Durable 与 Transient 区别</h4><h5 id="Durable-持久化"><a href="#Durable-持久化" class="headerlink" title="Durable (持久化)"></a>Durable (持久化)</h5><blockquote><p>定义：</p><blockquote><p>当一个队列被声明为 durable 时，它被称为持久化队列。</p></blockquote><p>特性：</p><blockquote><p>持久化队列会存储在磁盘上，这意味着即使 RabbitMQ 服务重启，队列也会在服务恢复时存在。<br>队列中的消息也可以被设置为持久化的，这意味着消息会被写入磁盘。如果队列本身也是持久化的，并且消息被标记为持久化，那么消息在<br>RabbitMQ 重启后仍然存在，除非它们已经被消费并确认。</p></blockquote><ul><li>适用场景：<blockquote><p>当需要确保消息不会因为 RabbitMQ 服务的重启而丢失时，应该使用持久化队列和持久化消息。</p></blockquote></li></ul></blockquote><h5 id="Transient-非持久化"><a href="#Transient-非持久化" class="headerlink" title="Transient (非持久化)"></a>Transient (非持久化)</h5><blockquote><p>定义：</p><blockquote><p>当一个队列不是 durable 时，默认就是 transient。</p></blockquote><p>特性：</p><blockquote><p>非持久化队列不会存储在磁盘上，因此如果 RabbitMQ 服务重启，所有非持久化的队列将会消失。<br>非持久化队列中的消息也默认是非持久化的，这意味着这些消息不会被写入磁盘，如果 RabbitMQ 服务重启，这些消息将会丢失。</p></blockquote><p>适用场景：</p><blockquote><p>当不需要在 RabbitMQ 重启后保留队列或消息时，可以使用非持久化队列和消息。这对于那些不需要高可靠性的临时任务或测试环境非常有用。</p></blockquote></blockquote><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><blockquote><p>Durable：适合于需要高可靠性的场景，确保消息不会因服务故障而丢失。<br>Transient：适合于不需要消息持久性的场景，可以节省资源并提高性能。<br>在实际应用中，选择 durable 还是 transient 需要考虑系统的可靠性需求以及性能需求之间的平衡。如果系统对消息的持久性和可靠性要求很高，那么应该使用<br>durable 队列和持久化消息；反之，如果系统对性能要求较高，可以考虑使用 transient 队列以提高处理速度</p></blockquote><h3 id="Virtual-Host-虚拟主机"><a href="#Virtual-Host-虚拟主机" class="headerlink" title="Virtual Host (虚拟主机)"></a>Virtual Host (虚拟主机)</h3><h4 id="什么是-Virtual-Host？"><a href="#什么是-Virtual-Host？" class="headerlink" title="什么是 Virtual Host？"></a>什么是 Virtual Host？</h4><blockquote><p>虚拟主机（Virtual Host）类似于一个独立的“子系统”或“命名空间”，用于隔离不同的消息队列、交换器和绑定。每个虚拟主机都有自己的队列、交换器和绑定关系，互不干扰</p><p>主要特点</p><ol><li>隔离性：<ul><li>每个虚拟主机内的队列、交换器和绑定都是相互独立的。</li><li>不同虚拟主机之间不能直接访问对方的资源。</li></ul></li><li>安全性<ul><li>每个虚拟主机都有自己的权限控制，可以限制用户对资源的访问。</li><li>用户和应用程序可以被限制在特定的虚拟主机内操作。</li></ul></li><li>组织结构<ul><li>虚拟主机可以用于组织不同的应用程序或业务模块。</li><li>例如，不同的微服务可以使用不同的虚拟主机进行消息传递。</li></ul></li></ol></blockquote><h4 id="那消费者是绑定队列还是交换机呢"><a href="#那消费者是绑定队列还是交换机呢" class="headerlink" title="那消费者是绑定队列还是交换机呢"></a>那消费者是绑定队列还是交换机呢</h4><blockquote><p>在 RabbitMQ 中，消费者实际上是绑定到队列上的，而不是直接绑定到交换机。消息的流动过程如下：<br>生产者：生产者发送消息到一个特定的交换机（Exchange），并指定一个路由键（Routing Key）。<br>交换机：交换机会根据消息的路由键以及自身配置的类型（例如 Direct、Fanout、Topic 或 Headers），决定将消息发送到哪些队列。<br>队列：队列接收来自交换机的消息，并保存这些消息直到它们被消费者消费。<br>消费者：消费者绑定到队列上，并从队列中消费消息。<br>绑定关系<br>交换机与队列：交换机与队列之间的绑定是由队列绑定到交换机时指定的路由键来决定的。队列可以绑定到一个或多个交换机，并且每个绑定可以有不同的路由键。<br>消费者与队列：消费者通过订阅队列来消费消息。消费者可以订阅一个或多个队列。</p></blockquote><h4 id="那如果我要给100个用户发送属于用户自己的消息，那岂不是要起100个队列一个交换机"><a href="#那如果我要给100个用户发送属于用户自己的消息，那岂不是要起100个队列一个交换机" class="headerlink" title="那如果我要给100个用户发送属于用户自己的消息，那岂不是要起100个队列一个交换机?"></a>那如果我要给100个用户发送属于用户自己的消息，那岂不是要起100个队列一个交换机?</h4><blockquote><p>确实，如果你需要给 100 个用户发送各自专属的消息，你可以考虑使用一个交换机和多个队列。具体来说，你可以为每个用户创建一个队列，并将这些队列绑定到同一个交换机上。这样，每个用户的消息就可以通过交换机路由到对应的队列。<br>方案概述<br>创建一个交换机：例如，创建一个 Direct 类型的交换机。<br>为每个用户创建一个队列：每个用户的队列名称可以是用户的唯一标识符。<br>绑定队列到交换机：将每个用户的队列绑定到交换机，并指定相应的路由键（通常是队列名称）。<br>发送消息：生产者发送消息时指定用户的路由键，交换机会将消息路由到对应的队列。<br>消费者订阅队列：每个用户订阅自己的队列来消费消息。</p></blockquote><h4 id="那如果使用rocketmq-是不是可以不用100个队列呢"><a href="#那如果使用rocketmq-是不是可以不用100个队列呢" class="headerlink" title="那如果使用rocketmq 是不是可以不用100个队列呢"></a>那如果使用rocketmq 是不是可以不用100个队列呢</h4><blockquote><p>在 RocketMQ 中，你可以使用更灵活的方式来处理这种情况，而不需要为每个用户创建单独的队列。RocketMQ<br>提供了多种机制来实现高效的消息生产和消费，包括标签（Tag）和消息过滤（SQL92）。<br>方案概述<br>创建一个 Topic：创建一个共享的 Topic，例如 user_messages。<br>使用 Tag：为每个用户的消息设置不同的 Tag。<br>消费者订阅 Topic 并过滤 Tag：每个消费者订阅 Topic 并根据 Tag 过滤消息。<br>示例代码</p></blockquote><h4 id="那要是几十万的用户那不是几十万个队列么，这怎么维护啊，没有解决办法"><a href="#那要是几十万的用户那不是几十万个队列么，这怎么维护啊，没有解决办法" class="headerlink" title="那要是几十万的用户那不是几十万个队列么，这怎么维护啊，没有解决办法?"></a>那要是几十万的用户那不是几十万个队列么，这怎么维护啊，没有解决办法?</h4><blockquote><p>在处理几十万用户的情况下，使用 RabbitMQ 也需要一种更高效的方案来管理和分发消息。以下是一些可能的解决方案：<br>使用 Topic Exchange 和消息过滤<br>通过使用 Topic Exchange 和消息过滤，可以避免为每个用户创建单独的队列。<br>方案概述<br>创建一个 Topic Exchange：创建一个共享的 Topic Exchange。<br>为每个用户创建一个队列：为每个用户创建一个队列。<br>绑定队列到 Topic Exchange：使用特定的绑定键（例如用户 ID）将队列绑定到 Topic Exchange。<br>发送消息：使用特定的路由键将消息发送到 Topic Exchange。<br>消费者订阅队列：每个消费者订阅自己的队列来消费消息。</p></blockquote><h4 id="tag概念"><a href="#tag概念" class="headerlink" title="tag概念"></a>tag概念</h4><blockquote><p>RocketMQ：<br>Tag 用于消息分类和过滤。<br>发布消息时可以指定 Tag。<br>消费消息时可以根据 Tag 进行过滤。<br>RabbitMQ：<br>Tag 主要用于标识消费者。<br>消费者订阅队列时会获得一个唯一的 Tag。<br>可以通过消息属性设置自定义字段，但不是标准的 Tag 概念。</p></blockquote><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><blockquote><blockquote><p>RocketMQ 中的 Tag 用于消息分类和过滤。<br>RabbitMQ 中的 Tag 主要用于标识消费者，也可以通过消息属性设置自定义字段。</p></blockquote></blockquote><h3 id="为什么rabbitmq-webstomp可以直接监听交换机的消息"><a href="#为什么rabbitmq-webstomp可以直接监听交换机的消息" class="headerlink" title="为什么rabbitmq webstomp可以直接监听交换机的消息"></a>为什么rabbitmq webstomp可以直接监听交换机的消息</h3><blockquote><p>RabbitMQ 本身并不直接支持 WebSockets 或 WebSocks Messaging Protocol (STOMP) 协议。但是，可以通过一些额外的组件来实现这一功能，比如使用<br>STOMP-over-WebSocket 客户端与 RabbitMQ 交互。这种情况下，客户端实际上并不是直接监听交换机的消息，而是通过 RabbitMQ 的<br>WebSocket 适配器或第三方服务（如 RabbitMQ STOMP 插件）来订阅队列或交换机。<br>直接监听交换机的消息<br>在传统的 RabbitMQ 模式下，消费者总是订阅队列而不是交换机。然而，在使用 WebSocket 或 STOMP 协议时，客户端可以通过 STOMP<br>的订阅机制来“看起来像是”直接订阅了交换机。实际上，客户端仍然通过队列间接地订阅了交换机。<br>如何实现<br>配置 STOMP 插件：如果使用 RabbitMQ 的 STOMP 插件，你需要在 RabbitMQ 中安装并启用这个插件。<br>连接和订阅：客户端通过 WebSocket 连接到 RabbitMQ，并使用 STOMP 协议订阅交换机或队列。<br>示例代码<br>假设你已经安装并启用了 STOMP 插件，并且有一个名为 my_exchange 的交换机，你可以使用一个 STOMP 客户端（如使用 JavaScript 的<br>sockjs-client 和 stomp.js）来订阅这个交换机：</p><blockquote><p>注意事项<br>队列绑定：即使使用 STOMP 订阅交换机，消息仍然需要被路由到队列。这意味着，必须存在至少一个队列绑定到交换机，并且 STOMP<br>客户端订阅的那个逻辑“交换机”实际上是订阅了这个队列。<br>虚拟主机：确保客户端连接到正确的虚拟主机，并且具有适当的权限来订阅所需的交换机或队列。<br>消息确认：如果需要确认消息，客户端还需要发送 ACK 回到 RabbitMQ。</p></blockquote></blockquote><h3 id="行业内使用rabbitmq-时常用的交换机一般是"><a href="#行业内使用rabbitmq-时常用的交换机一般是" class="headerlink" title="行业内使用rabbitmq 时常用的交换机一般是"></a>行业内使用rabbitmq 时常用的交换机一般是</h3><blockquote><p>在实际应用中，RabbitMQ 的交换机选择通常取决于具体的业务需求和消息传递模式。以下是在行业中常用的几种交换机类型及其适用场景：<br>Direct Exchange（直连交换机）<br>适用场景：当需要根据确切的路由键（Routing Key）来精确路由消息时。<br>优点：简单直接，易于理解和实现。<br>常见用法：用于一对一或多对一的消息路由，例如，将特定类型的消息路由到处理该类型消息的服务。<br>Fanout Exchange（扇形交换机）<br>适用场景：当需要将消息广播到所有订阅的队列时。<br>优点：实现简单，无需指定路由键。<br>常见用法：用于发布&#x2F;订阅模式，例如，日志收集系统中将日志消息广播给多个日志处理服务。<br>Topic Exchange（主题交换机）<br>适用场景：当需要根据模式匹配（Pattern Matching）来路由消息时。<br>优点：灵活，支持使用通配符进行复杂的路由规则定义。<br>常见用法：用于多对多的消息路由，例如，将消息根据主题路由到多个队列，或者在一个系统中有多个服务需要根据消息类型来接收消息。<br>Headers Exchange（标头交换机）<br>适用场景：当需要根据消息的内容（尤其是头部信息）来路由消息时。<br>优点：提供了基于消息内容的路由方式，而不是仅仅基于路由键。<br>常见用法：较少见，主要用于需要复杂路由规则的应用场景，例如，需要根据消息的多个属性来决定路由。<br>行业内的选择趋势<br>在实际项目中，开发人员通常会选择 Direct Exchange 或 Topic Exchange，因为这两种交换机类型能够满足大多数消息传递的需求，并且具有较好的灵活性和可扩展性。<br>Direct Exchange 适用于需要精确控制消息路由的场景，特别是在消息类型明确且数量不多的情况下。<br>Topic Exchange 则更适合需要根据模式进行消息过滤和路由的场景，尤其是在需要支持动态添加队列或服务时。<br>实际应用案例<br>日志处理系统：可能使用 Fanout Exchange 来将日志消息广播到多个日志处理服务。<br>订单处理系统：可能使用 Direct Exchange 来将订单状态变更消息精确地路由到负责处理特定状态变更的服务。<br>通知系统：可能使用 Topic Exchange 来将不同类型的通知消息（如邮件通知、短信通知）根据主题路由到相应的处理队列。<br>总结<br>选择哪种交换机类型取决于你的具体需求。如果你的应用需要精细控制消息的流向，那么 Direct Exchange<br>可能是最佳选择；如果你的应用需要基于模式匹配来路由消息，那么 Topic Exchange 更加合适；如果你的应用需要将消息广播给多个队列，那么<br>Fanout Exchange 是一个简单有效的选择。选择合适的交换机类型可以帮助你构建高效、可靠的消息传递系统。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署rocketmq5.3</title>
      <link href="/2024/09/11/mq/rokcetmq%E9%83%A8%E7%BD%B2/"/>
      <url>/2024/09/11/mq/rokcetmq%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">  namesrv:</span><br><span class="line">    image: apache/rocketmq:5.3.0</span><br><span class="line">    container_name: rmqnamesrvnew</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;9876:9876&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - rocketmq</span><br><span class="line">    command: sh mqnamesrv</span><br><span class="line"></span><br><span class="line">  broker:</span><br><span class="line">    image: apache/rocketmq:5.3.0</span><br><span class="line">    container_name: rmqbrokernew</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;10909:10909&quot;</span><br><span class="line">      - &quot;10911:10911&quot;</span><br><span class="line">      - &quot;10912:10912&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - NAMESRV_ADDR=rmqnamesrvnew:9876</span><br><span class="line">    depends_on:</span><br><span class="line">      - namesrv</span><br><span class="line">    networks:</span><br><span class="line">      - rocketmq</span><br><span class="line">    command: sh mqbroker</span><br><span class="line"></span><br><span class="line">  proxy:</span><br><span class="line">    image: apache/rocketmq:5.3.0</span><br><span class="line">    container_name: rmqproxynew</span><br><span class="line">    networks:</span><br><span class="line">      - rocketmq</span><br><span class="line">    depends_on:</span><br><span class="line">      - broker</span><br><span class="line">      - namesrv</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8082:8082&quot;</span><br><span class="line">      - &quot;8081:8081&quot;</span><br><span class="line">    restart: on-failure</span><br><span class="line">    environment:</span><br><span class="line">      - NAMESRV_ADDR=rmqnamesrvnew:9876</span><br><span class="line">    command: sh mqproxy</span><br><span class="line"></span><br><span class="line">  console:</span><br><span class="line">    image: apacherocketmq/rocketmq-dashboard:latest</span><br><span class="line">    container_name: rmqconsolenew</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8083:8080&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - JAVA_OPTS=-Drocketmq.namesrv.addr=rmqnamesrvnew:9876</span><br><span class="line">    depends_on:</span><br><span class="line">      - namesrv</span><br><span class="line">    networks:</span><br><span class="line">      - rocketmq</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  rocketmq:</span><br><span class="line">    driver: bridge</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rocketmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rocketmq部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab 备份和恢复</title>
      <link href="/2024/07/19/git/gitlab/"/>
      <url>/2024/07/19/git/gitlab/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="备份gitlab"><a href="#备份gitlab" class="headerlink" title="备份gitlab"></a>备份gitlab</h3><blockquote><p>声明: 一切备份和恢复操作, 都是在gitlab容器内操作，不是在宿主机上操作</p></blockquote><h4 id="自定义命名创建备份卷"><a href="#自定义命名创建备份卷" class="headerlink" title="自定义命名创建备份卷"></a>自定义命名创建备份卷</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.进入容器</span><br><span class="line">docker exec -it or ID &lt;容器名 &gt;bash</span><br><span class="line"></span><br><span class="line">2.创建卷</span><br><span class="line">cd /var/opt/gitlab/backups</span><br><span class="line"></span><br><span class="line">3.执行备份</span><br><span class="line">gitlab-rake gitlab:backup:create</span><br><span class="line"></span><br><span class="line">4.查看备份文件</span><br><span class="line">ls -l</span><br><span class="line"></span><br><span class="line">5.退出容器</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">6.拷贝至宿主机</span><br><span class="line">docker cp &lt;容器名&gt;:/var/opt/gitlab/backups/&lt;备份文件名&gt; home/gitlab/opt/gitlab/backups/&lt;备份文件名&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="在新宿主机上恢复备份"><a href="#在新宿主机上恢复备份" class="headerlink" title="在新宿主机上恢复备份"></a>在新宿主机上恢复备份</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">远程传输文件</span></span><br><span class="line">scp -r /home/gitlab/opt/gitlab/backups/&lt;备份文件名&gt; root@192.168.1.1:home/gitlab/opt/gitlab/backups/&lt;备份文件名&gt;</span><br><span class="line"></span><br><span class="line">1.将备份卷挂载复制到新宿主机的新gitlab容器中</span><br><span class="line">docker cp -r /home/gitlab/opt/gitlab/backups/&lt;备份文件名&gt; &lt;新容器名&gt;:/var/opt/gitlab/backups/&lt;备份文件名&gt;</span><br><span class="line"></span><br><span class="line">2.进入容器</span><br><span class="line">docker exec -it &lt;新容器名&gt; bash</span><br><span class="line"></span><br><span class="line">3.停止服务</span><br><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br><span class="line"></span><br><span class="line">4.执行恢复</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意一般备份的文件名 类型这种1721981045_2024_07_26_11.1.4_gitlab_backup.tar  这里使用恢复命令时只需要</span></span><br><span class="line">gitlab-rake gitlab:backup:restore BACKUP=1721981045_2024_07_26_11.1.4 即可</span><br><span class="line"></span><br><span class="line">5.恢复完成后退出容器</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">6.重启服务</span><br><span class="line">docker restart &lt;新容器名&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="定时备份"><a href="#定时备份" class="headerlink" title="定时备份"></a>定时备份</h4><h5 id="创建备份和定时清理脚本"><a href="#创建备份和定时清理脚本" class="headerlink" title="创建备份和定时清理脚本"></a>创建备份和定时清理脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GitLab容器名称或ID</span></span><br><span class="line">CONTAINER_NAME=gitlab</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">宿主机上的备份目录</span></span><br><span class="line">BACKUP_DIR=/home/tools/gitlab/backup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志文件</span></span><br><span class="line">LOG_FILE=/home/tools/gitlab/logs/backup.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行备份</span></span><br><span class="line">docker exec -t $CONTAINER_NAME gitlab-rake gitlab:backup:create &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查备份命令是否成功</span></span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">    echo &quot;$(date): ----备份 gitlab 数据错误!&quot; &gt;&gt; $LOG_FILE</span><br><span class="line">    echo &quot;&quot; &gt;&gt; $LOG_FILE  # 输出空行</span><br><span class="line">else</span><br><span class="line">    echo &quot;$(date): ----备份 已完成.&quot; &gt;&gt; $LOG_FILE</span><br><span class="line">    echo &quot;&quot; &gt;&gt; $LOG_FILE  # 输出空行</span><br><span class="line">    </span><br><span class="line">    # 获取容器内最新的备份文件名</span><br><span class="line">    LATEST_BACKUP=$(docker exec $CONTAINER_NAME ls /var/opt/gitlab/backups | grep gitlab_backup | sort -r | head -n 1)</span><br><span class="line">    </span><br><span class="line">    # 将新备份从容器复制到宿主机</span><br><span class="line">    docker cp $CONTAINER_NAME:/var/opt/gitlab/backups/$LATEST_BACKUP $BACKUP_DIR/</span><br><span class="line">    </span><br><span class="line">    # 删除容器内的这个备份文件</span><br><span class="line">    docker exec -t $CONTAINER_NAME rm -f /var/opt/gitlab/backups/$LATEST_BACKUP</span><br><span class="line">    </span><br><span class="line">    # 清理宿主机上的旧备份，但保留最新的两个</span><br><span class="line">    cd $BACKUP_DIR</span><br><span class="line">    BACKUPS=$(ls -1t | grep gitlab_backup)</span><br><span class="line">    if [ &quot;$(echo &quot;$BACKUPS&quot; | wc -l)&quot; -gt 2 ]; then</span><br><span class="line">        for backup in $(echo &quot;$BACKUPS&quot; | tail -n +3); do</span><br><span class="line">            rm -f $backup</span><br><span class="line">        done</span><br><span class="line">    fi</span><br><span class="line">    </span><br><span class="line">    echo &#x27;已删除主机上的旧备份，保留最新的两个备份.&#x27; &gt;&gt; $LOG_FILE</span><br><span class="line">    echo &#x27;从容器中删除的最新备份文件.&#x27; &gt;&gt; $LOG_FILE</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="Cron-Job-定时任务"><a href="#Cron-Job-定时任务" class="headerlink" title="Cron Job 定时任务"></a>Cron Job 定时任务</h4><h5 id="编辑crontab"><a href="#编辑crontab" class="headerlink" title="编辑crontab:"></a>编辑crontab:</h5><blockquote><p> crontab -e</p></blockquote><h5 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务:"></a>添加定时任务:</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 * * * /home/tools/gitlab/gitlab_backup_and_cleanup.sh</span><br></pre></td></tr></table></figure><h4 id="列出定时任务"><a href="#列出定时任务" class="headerlink" title="列出定时任务"></a>列出定时任务</h4><blockquote><p>crontab -l</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab备份和恢复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql拓展篇</title>
      <link href="/2024/07/08/mysql/mysql%E6%8B%93%E5%B1%95%E7%AF%87/"/>
      <url>/2024/07/08/mysql/mysql%E6%8B%93%E5%B1%95%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="mysql拓展篇之分库分表"><a href="#mysql拓展篇之分库分表" class="headerlink" title="mysql拓展篇之分库分表"></a>mysql拓展篇之分库分表</h3><h5 id="什么是分库分表，为什么我们需要分库分表"><a href="#什么是分库分表，为什么我们需要分库分表" class="headerlink" title="+ 什么是分库分表，为什么我们需要分库分表"></a>+ 什么是分库分表，为什么我们需要分库分表</h5><h5 id="如何进行分库分表，有什么优缺点"><a href="#如何进行分库分表，有什么优缺点" class="headerlink" title="+ 如何进行分库分表，有什么优缺点"></a>+ 如何进行分库分表，有什么优缺点</h5><h5 id="对于分库分表有哪些架构设计，对于后期的扩容扩展怎么样"><a href="#对于分库分表有哪些架构设计，对于后期的扩容扩展怎么样" class="headerlink" title="+ 对于分库分表有哪些架构设计，对于后期的扩容扩展怎么样"></a>+ 对于分库分表有哪些架构设计，对于后期的扩容扩展怎么样</h5><h5 id="目前行业内流行的解决方案有哪些？各自有什么特点"><a href="#目前行业内流行的解决方案有哪些？各自有什么特点" class="headerlink" title="+ 目前行业内流行的解决方案有哪些？各自有什么特点"></a>+ 目前行业内流行的解决方案有哪些？各自有什么特点</h5><h5 id="自己设计一个数据库分库分表的框架，如何设计，需要考虑哪些因素"><a href="#自己设计一个数据库分库分表的框架，如何设计，需要考虑哪些因素" class="headerlink" title="+ 自己设计一个数据库分库分表的框架，如何设计，需要考虑哪些因素"></a>+ 自己设计一个数据库分库分表的框架，如何设计，需要考虑哪些因素</h5>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法.md</title>
      <link href="/2024/06/18/markdown/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/06/18/markdown/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h4 id="字体语法"><a href="#字体语法" class="headerlink" title="字体语法"></a>字体语法</h4><p>   <em>这里是文字</em><br>   <em>这里是文字</em><br>   <strong>这里是文字</strong><br>   <em><strong>这里是文字</strong></em><br>   <del>这里是文字</del></p><h4 id="设计字体、字号和颜色"><a href="#设计字体、字号和颜色" class="headerlink" title="设计字体、字号和颜色"></a>设计字体、字号和颜色</h4><p>   3.1 字体颜色<br>      <font face='黑体' color=#ff0000 size=4>我是正文</font><br>   3.2 背景色<br>     <table><tr><td bgcolor=orange>背景色是：orange</td></tr></table></p><h4 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h4><p>   <a href="baidu.com">百度一下，你就知道</a><br>  4.1 给链接增加一个Title<br>   <a href="baidu.com,%22%E6%90%9C%E7%B4%A2%E7%BD%91%E7%AB%99%22">百度一下，你就知道</a></p><p>####图片链接<br>   <img src="/img/background.jpg" alt="图片解释性内容"><br>   5.1 图片超链接<br>   <a href="%E8%B7%B3%E8%BD%AC%E9%93%BE%E6%8E%A5"><img src="/...%5B%E7%9B%B8%E5%85%B3%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%5D" alt="我的博客主页"></a></p><h4 id="自动生成超链接"><a href="#自动生成超链接" class="headerlink" title="自动生成超链接"></a>自动生成超链接</h4><pre><code>&lt;&quot;...[相关链接]&quot;&gt;</code></pre><h4 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h4><h4 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h4><h4 id="分割线语法"><a href="#分割线语法" class="headerlink" title="分割线语法"></a>分割线语法</h4><h2 id="多个星号-破折号-—"><a href="#多个星号-破折号-—" class="headerlink" title="   多个星号 (***)   ***   破折号(—) "></a>   多个星号 (***)<br>   ***<br>   破折号(—) </h2><h2 id="下划线"><a href="#下划线" class="headerlink" title="   下划线 (___)"></a>   下划线 (___)</h2><h4 id="包裹转义代码"><a href="#包裹转义代码" class="headerlink" title="包裹转义代码"></a>包裹转义代码</h4><pre><code>``printf(&quot;hello world&quot;);``//这是markdown语法&lt;code&gt;printf(&quot;hello world&quot;);&lt;/code&gt; //这是HTML语法</code></pre><h4 id="代码块-“-”"><a href="#代码块-“-”" class="headerlink" title="代码块 “&#96;&#96;&#96;&#96;&#96;&#96;”"></a>代码块 “&#96;&#96;&#96;&#96;&#96;&#96;”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="引用-“-”"><a href="#引用-“-”" class="headerlink" title="引用 “ &gt;”"></a>引用 “ &gt;”</h4><blockquote><p>引用</p><blockquote><p>嵌套引用</p><blockquote><p>在嵌套</p></blockquote></blockquote></blockquote><h4 id="引用包含其他语法"><a href="#引用包含其他语法" class="headerlink" title="引用包含其他语法"></a>引用包含其他语法</h4><blockquote><p><em><strong>heheh</strong></em></p></blockquote><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><ul><li>我是无序列表</li><li>我是无序列表</li></ul><ul><li>我是无序列表</li><li>我是无序列表</li></ul><ul><li>我是无序列表</li><li>我是无序列表</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><pre><code>1. 我是有序列表2. 我是有序列表3. 我是有序列表</code></pre><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><table><thead><tr><th>姓名</th><th>学号</th><th>分数</th></tr></thead><tbody><tr><td>孙悟空</td><td>2021</td><td>95</td></tr><tr><td>猪八戒</td><td>20211</td><td>96</td></tr></tbody></table><h4 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h4><p> \          表示一个反斜线<br> *          表示一个*<br> {}        表示一个{}<br> …（其他的类似，不再举例）</p><ol><li>其他特殊字符<a href="https://unicode-table.com/cn/">特殊符号链接</a><br>&#10003;   它是一个√<br>&#10052;   它是一个❄</li></ol><h4 id="Latex数学公式"><a href="#Latex数学公式" class="headerlink" title="Latex数学公式"></a>Latex数学公式</h4><pre><code>1. 指数与下标   语法形式：$a^3_&#123;2&#125;$2. 平方根   语法形式：$\sqrt&#123;x&#125;$3. 在上方或者下方的下划线(可以表示取反等)   语法形式：$\overline&#123;m+n&#125;$   和      $\underline&#123;m+n&#125;$4. 向量   $\vec a$表示向量a   $\overrightarrow&#123;AB&#125;$  表示向量AB，箭头指向右(即A-&gt;B)   $\overleftarrow&#123;AB&#125;$   表示向量BA，箭头指向左(即A&lt;-B)5. 分数   $\frac&#123;x^&#123;2&#125;&#125;&#123;k+1&#125;$6. 积分、求和、求积运算符   求和：$\sum_&#123;i=1&#125;^&#123;n&#125;$//按照$\sum_&#123;...&#125;^&#123;...&#125;$的格式   积分：$\int_&#123;0&#125;^&#123;\pi&#125;$//按照$\int_&#123;...&#125;^&#123;...&#125;$的格式   求积：$\prod_&#123;0&#125;^&#123;n&#125;$//同上两种类似，按照$\prod_&#123;...&#125;^&#123;...&#125;$的格式</code></pre><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><pre><code>tag=&gt;type: content:&gt;url</code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p> st&#x3D;&gt;start: 开始<br> e&#x3D;&gt;end: 结束<br> op&#x3D;&gt;operation: 操作<br> sub1&#x3D;&gt;subroutine: 程序1<br> cond&#x3D;&gt;condition: Yes or No?<br> io&#x3D;&gt;inputoutput: 输入&#x2F;输出<br> st-&gt;op-&gt;cond<br> cond(yes)-&gt;io-&gt;e<br> cond(no)-&gt;sub1(right)-&gt;op</p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="/2024/06/16/docker/docker/"/>
      <url>/2024/06/16/docker/docker/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="私有仓库搭建问题"><a href="#私有仓库搭建问题" class="headerlink" title="私有仓库搭建问题"></a>私有仓库搭建问题</h2><h3 id="拉取私有仓库镜像"><a href="#拉取私有仓库镜像" class="headerlink" title="拉取私有仓库镜像"></a>拉取私有仓库镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry:2</span><br></pre></td></tr></table></figure><h3 id="启动命令-无密码"><a href="#启动命令-无密码" class="headerlink" title="启动命令(无密码)"></a>启动命令(无密码)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name my-registry -p 5000:5000 registry:2</span><br></pre></td></tr></table></figure><h3 id="服务器安全组-5000端口允许外部访问"><a href="#服务器安全组-5000端口允许外部访问" class="headerlink" title="服务器安全组 5000端口允许外部访问"></a>服务器安全组 5000端口允许外部访问</h3><h3 id="登录私有仓库（未设置密码跳过该项）"><a href="#登录私有仓库（未设置密码跳过该项）" class="headerlink" title="登录私有仓库（未设置密码跳过该项）"></a>登录私有仓库（未设置密码跳过该项）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login &lt;ip&gt;:5000</span><br></pre></td></tr></table></figure><h3 id="推送镜像到私有仓库"><a href="#推送镜像到私有仓库" class="headerlink" title="推送镜像到私有仓库"></a>推送镜像到私有仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag my_image:tag &lt;ip &gt;:5000/my_image:tag</span><br><span class="line">docker push &lt;ip &gt;:5000/my_image:tag</span><br></pre></td></tr></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull &lt;ip&gt;/my_image:tag</span><br></pre></td></tr></table></figure><h3 id="查询私有仓库镜像列表"><a href="#查询私有仓库镜像列表" class="headerlink" title="查询私有仓库镜像列表"></a>查询私有仓库镜像列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search --filter is-official=<span class="literal">false</span> --filter is-automated=<span class="literal">false</span> &lt;ip&gt;:5000/my_image</span><br></pre></td></tr></table></figure><h3 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="拉取镜像时-提示非信任-处理方法"><a href="#拉取镜像时-提示非信任-处理方法" class="headerlink" title="拉取镜像时 提示非信任 处理方法"></a>拉取镜像时 提示非信任 处理方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull --disable-content-trust=<span class="literal">true</span> &lt;ip&gt;:5000/redis:<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="不使用仓库本地迁移镜像"><a href="#不使用仓库本地迁移镜像" class="headerlink" title="不使用仓库本地迁移镜像"></a>不使用仓库本地迁移镜像</h2><h3 id="将镜像构建tar文件并指定目录"><a href="#将镜像构建tar文件并指定目录" class="headerlink" title="将镜像构建tar文件并指定目录"></a>将镜像构建tar文件并指定目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o /path/to/save/my_image_latest.tar my_image:latest</span><br></pre></td></tr></table></figure><h3 id="将tar包加载成镜像-可以到其他服务器去加载成镜像"><a href="#将tar包加载成镜像-可以到其他服务器去加载成镜像" class="headerlink" title="将tar包加载成镜像(可以到其他服务器去加载成镜像)"></a>将tar包加载成镜像(可以到其他服务器去加载成镜像)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i /path/to/my_image_latest.tar</span><br></pre></td></tr></table></figure><h2 id="docker-容器内操作"><a href="#docker-容器内操作" class="headerlink" title="docker 容器内操作"></a>docker 容器内操作</h2><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container_name_or_id&gt; /bin/bash</span><br></pre></td></tr></table></figure><h2 id="docker-run-命令"><a href="#docker-run-命令" class="headerlink" title="docker run 命令"></a>docker run 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">-d, --detach</span><br><span class="line">将容器放在后台运行（守护进程模式），并返回容器ID。</span><br><span class="line"></span><br><span class="line">-i, --interactive</span><br><span class="line">使容器的标准输入保持打开，通常与 -t 一起使用以允许容器接收输入。</span><br><span class="line"></span><br><span class="line">-t, --<span class="built_in">tty</span></span><br><span class="line">分配一个伪终端（TTY）给容器，使得它能够支持命令行交互。</span><br><span class="line"></span><br><span class="line">--name NAME</span><br><span class="line">为容器指定一个名称。</span><br><span class="line"></span><br><span class="line">-e, --<span class="built_in">env</span></span><br><span class="line">设置环境变量，格式为 -e VAR_NAME=VAR_VALUE。</span><br><span class="line"></span><br><span class="line">-p, --publish</span><br><span class="line">映射容器端口到宿主机端口，格式为 -p hostPort:containerPort 或 -p ip:hostPort:containerPort。</span><br><span class="line"></span><br><span class="line">-v, --volume</span><br><span class="line">绑定宿主机目录到容器内目录，格式为 -v hostDir:containerDir 或 -v <span class="built_in">type</span>:hostDir:containerDir。</span><br><span class="line"></span><br><span class="line">--restart</span><br><span class="line">设置容器的重启策略，如 no, on-failure, always, unless-stopped。</span><br><span class="line"></span><br><span class="line">-m, --memory</span><br><span class="line">限制容器可以使用的最大内存量，如 -m 1g 表示1GB。</span><br><span class="line"></span><br><span class="line">--network</span><br><span class="line">指定容器的网络模式，如 bridge（默认）、host、none 或自定义网络。</span><br><span class="line"></span><br><span class="line">--cpus</span><br><span class="line">限制容器可以使用的CPU核心数或CPU份额。</span><br><span class="line"></span><br><span class="line">--device</span><br><span class="line">允许容器访问宿主机的硬件设备。</span><br><span class="line"></span><br><span class="line">-u, --user</span><br><span class="line">指定容器运行的用户或UID。</span><br><span class="line"></span><br><span class="line">--<span class="built_in">rm</span></span><br><span class="line">当容器退出后自动删除它。</span><br><span class="line"></span><br><span class="line">-w, --workdir</span><br><span class="line">指定容器的工作目录。</span><br><span class="line"></span><br><span class="line">--entrypoint</span><br><span class="line">覆盖镜像的默认入口点。</span><br><span class="line"></span><br><span class="line">--label</span><br><span class="line">添加元数据标签给容器，格式为 --label key=value。</span><br><span class="line"></span><br><span class="line">--privileged</span><br><span class="line">给予容器更多的权限，包括对设备的访问等。</span><br><span class="line">这只是 docker run 支持的一部分参数，更多高级选项和详细信息可以通过运行 docker run --<span class="built_in">help</span> 或查阅 Docker 官方文档获得。使用这些参数可以根据具体需求定制容器的运行环境和行为。</span><br></pre></td></tr></table></figure><h2 id="docker-查看运行参数"><a href="#docker-查看运行参数" class="headerlink" title="docker 查看运行参数"></a>docker 查看运行参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect &lt;container_name_or_id&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2024/06/15/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/06/15/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="解压zip-文件"><a href="#解压zip-文件" class="headerlink" title="解压zip 文件"></a>解压zip 文件</h2><h3 id="下载unzip"><a href="#下载unzip" class="headerlink" title="下载unzip"></a>下载unzip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install unzip</span><br></pre></td></tr></table></figure><h3 id="解压到当前目录下"><a href="#解压到当前目录下" class="headerlink" title="解压到当前目录下"></a>解压到当前目录下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip xxx.zip</span><br></pre></td></tr></table></figure><h3 id="解压到指定目录下"><a href="#解压到指定目录下" class="headerlink" title="解压到指定目录下"></a>解压到指定目录下</h3><blockquote><p>比如 &#x2F;path&#x2F;to&#x2F;extract&#x2F;to</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip xxx.zip -d /path/to/extract/to</span><br></pre></td></tr></table></figure><h2 id="chmod赋予权限"><a href="#chmod赋予权限" class="headerlink" title="chmod赋予权限"></a>chmod赋予权限</h2><h3 id="以-chmod-777-xxx-txt-为例"><a href="#以-chmod-777-xxx-txt-为例" class="headerlink" title="以 chmod 777  xxx.txt 为例"></a>以 chmod 777  xxx.txt 为例</h3><blockquote><ul><li>第一位数字代表文件所有者的权限</li><li>第二位数字代表文件所属组的权限</li><li>第三位数字代表其他用户的权限</li></ul><ul><li>数字模式:<blockquote><ul><li>在八进制表示法中，权限被分为读（r&#x3D;4）、写（w&#x3D;2）、执行（x&#x3D;1）,“7”意味着开启所有权限（读4 + 写2 + 执行1 &#x3D; 7)</li></ul></blockquote></li><li>符号模式:<blockquote><ul><li>u 代表所有者，g 代表所属组，o 代表其他人，a 代表所有人（u, g, o的总和）。 添加权限，- 移除权限，&#x3D; 设置权限。</li><li>举例<blockquote><ul><li>1.1.1 给文件的所有者增加写权限:<br> chmod u+w myfile.txt</li><li>1.2.2 移除文件的组用户执行权限：<br> chmod g-x myfile.txt</li><li>1.2.3 设置所有用户（所有者、组用户、其他用户）的权限为只读:<br> chmod a&#x3D;r myfile.txt</li></ul></blockquote></li></ul></blockquote></li></ul></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span> : 查看当前文件所在目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> .. :回到上一级目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span>(ll) : <span class="built_in">ls</span>列出当前文件夹下所有文件，ll比<span class="built_in">ls</span>更详细</span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> :新建一个文件如 <span class="built_in">touch</span> index.js 就会在当前目录下创建一个index.js文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> :删除一个文件，<span class="built_in">rm</span> index.js 就会把index.js文件删除</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> : 新建一个目录，就是新建一个文件夹</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -r :删除一个文件夹,<span class="built_in">rm</span> -r src 删除src目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf :递归删除目录  ** 切勿在linux环境下使用 <span class="built_in">rm</span> -rf / **</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> :移动文件 ,<span class="built_in">mv</span> index.html src; index.html 是要移动的文件，src 是移动到的目标目录位置</span><br><span class="line"></span><br><span class="line">reset :重新初始化终端/包括清屏</span><br><span class="line"></span><br><span class="line">clear :清屏</span><br><span class="line"></span><br><span class="line"><span class="built_in">history</span> :查看命令历史</span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span> :帮助</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> : 退出</span><br><span class="line"></span><br><span class="line"><span class="comment"># :表示注释</span></span><br></pre></td></tr></table></figure><h3 id="搜索关键字"><a href="#搜索关键字" class="headerlink" title="搜索关键字"></a>搜索关键字</h3><blockquote><p> find &#x2F; -name “nginx”</p></blockquote><h3 id="搜索关键字进程"><a href="#搜索关键字进程" class="headerlink" title="搜索关键字进程"></a>搜索关键字进程</h3><blockquote><p> ps aux | grep ngin</p></blockquote><h3 id="查找关键字安装路径"><a href="#查找关键字安装路径" class="headerlink" title="查找关键字安装路径"></a>查找关键字安装路径</h3><blockquote><p>rpm -ql nginx</p></blockquote><h3 id="查找关键字服务状态"><a href="#查找关键字服务状态" class="headerlink" title="查找关键字服务状态"></a>查找关键字服务状态</h3><blockquote><p>rpm -ql nginx</p></blockquote><h3 id="查找关键字可执行文件"><a href="#查找关键字可执行文件" class="headerlink" title="查找关键字可执行文件"></a>查找关键字可执行文件</h3><blockquote><p>whereis nginx<br>which nginx</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea Ignore</title>
      <link href="/2023/06/17/git/gitignor/"/>
      <url>/2023/06/17/git/gitignor/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#java</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line">#<span class="keyword">package</span> file</span><br><span class="line">*.war</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line">#maven ignore</span><br><span class="line">target/</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line">#eclipse ignore</span><br><span class="line">.settings/</span><br><span class="line">.project</span><br><span class="line">.classpatch</span><br><span class="line"></span><br><span class="line">#Intellij idea</span><br><span class="line">.idea/</span><br><span class="line">/idea/</span><br><span class="line">*.ipr</span><br><span class="line">*.iml</span><br><span class="line">*.iws</span><br><span class="line"></span><br><span class="line"># temp file</span><br><span class="line">*.log</span><br><span class="line">*.cache</span><br><span class="line">*.diff</span><br><span class="line">*.patch</span><br><span class="line">*.tmp</span><br><span class="line"></span><br><span class="line"># system ignore</span><br><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea ignore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/2023/06/17/git/git%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/06/17/git/git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="git创建仓库"><a href="#git创建仓库" class="headerlink" title="git创建仓库"></a>git创建仓库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; git init&#x27;</span> 使用当前目录作为git仓库，init初始化即可  注意:该命令执行完成后会有一个 <span class="string">&quot;.git&quot;</span>的文件 ，但是是隐藏文件，测试的话可以点击查看隐藏文件</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git init [file_name] &#x27;</span> 指定一个目录为git仓库 如: git init git</span><br></pre></td></tr></table></figure><h3 id="git-克隆仓库"><a href="#git-克隆仓库" class="headerlink" title="git 克隆仓库"></a>git 克隆仓库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; git clone &lt;repo&gt;&#x27;</span> 仓库拷贝链接，例如 git clone https:<span class="comment">//gitee.com/xxx/demo.git</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git clone &lt;repo&gt; &lt;directory&gt;&#x27;</span> 克隆仓库到指定文件夹 git clone https:<span class="comment">//gitee.com/xxx/demo.git git</span></span><br><span class="line"></span><br><span class="line">* repo:Git 仓库。</span><br><span class="line">* directory:本地目录。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; git config --list&#x27;</span> 显示当前的 git 配置信息</span><br><span class="line"></span><br><span class="line"># 针对当前仓库 </span><br><span class="line"><span class="string">&#x27; git config -e&#x27;</span> 编辑 git 配置文件 </span><br><span class="line"></span><br><span class="line">#针对系统上所有仓库</span><br><span class="line"><span class="string">&#x27; git config -e --global&#x27;</span> 编辑 git 配置文件  </span><br><span class="line"></span><br><span class="line">#设置提交代码时的用户信息</span><br><span class="line"><span class="string">&#x27; git config --global user.name &quot;xxx&quot; &#x27;</span></span><br><span class="line"><span class="string">&#x27; git config --global user.email xxx@.xx.com&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h3><ul><li>git版本控制的操作原理<blockquote><p>1.添加至本地暂存区域<br>2.commit提交<br>3.推送至git仓库完成版本</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> *提交与修改</span><br><span class="line"><span class="string">&#x27; git add . &#x27;</span>  提交代码( add 后有一<span class="string">&#x27;.&#x27;</span>不要弄丢了)(提交至本地暂存区!<span class="string">&quot;还未上传至仓库&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git status&#x27;</span> 查看仓库当前的状态，显示有变更的文件</span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27; git diff&#x27;</span> 比较文件的不同，即暂存区和工作区的差异</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git reset&#x27;</span> 回退版本</span><br><span class="line"> </span><br><span class="line"> *提交日志</span><br><span class="line"><span class="string">&#x27; git log&#x27;</span> 查看历史提交记录</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git blame &lt;file&gt;&#x27;</span>  以列表形式查看指定文件的历史修改记录</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git mv&#x27;</span> 移动或重命名工作区文件</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git rm&#x27;</span> 删除工作区文件</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git commit -m  &quot;&lt;&lt;说明&gt;&gt;&quot;  &#x27;</span>  例如 git commit -m <span class="string">&quot;hello-word&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git push&#x27;</span>     推送代码</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git push origin master&#x27;</span> 推送至master主分支</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git push origin demo&#x27;</span>推送至demo分支</span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><blockquote><p>常规分支<br>master, 主分支<br> v1, 上线版本1<br> v2, 上线版本2<br> v3, 上线版本3<br> dev, 开发版本</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&#x27; git branch &#x27;</span> 列出当前所有(本地)分支</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git branch -r&#x27;</span> 列出所有远程分支 -r (remote:远程)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git branch [branch-name]&#x27;</span> 新建一个分支，但依然停留在当前分支</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git chekout -b [branch]&#x27;</span> 新建一个分支，并切换到该分支 -b (branch)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git merge [branch]&#x27;</span> 合并指定分支到当前分支</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git branch -d [branch-name]&#x27;</span> 删除分支 -d (delete)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git push origin --delete [branch-name]&#x27;</span> 删除远程分支</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git branch -dr [remote/branch]&#x27;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Butterfly文章书写格式</title>
      <link href="/2023/06/17/markdown/hexo%20butterfly%E6%96%87%E7%AB%A0%E4%B9%A6%E5%86%99%E6%A0%BC%E5%BC%8F/"/>
      <url>/2023/06/17/markdown/hexo%20butterfly%E6%96%87%E7%AB%A0%E4%B9%A6%E5%86%99%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Front-matter<br>Front-matter 是档案最上方以 — 分隔的区域，用于指定个别档案的变数。</p><p>如果标注可选的参数，可根据自己需要添加，不用全部都写在markdown里</p><h2 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top_img:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aside:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br></pre></td></tr></table></figure><p>title【必需】页面标题<br>date【必需】页面创建日期<br>type【必需】标籤、分类和友情链接三个页面需要配置<br>updated【可选】页面更新日期<br>description【可选】页面描述<br>keywords【可选】页面关键字<br>comments【可选】显示页面评论模块(默认 true)<br>top_img【可选】页面顶部图片<br>mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)<br>katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)<br>aside【可选】显示侧边栏 (默认 true)<br>aplayer【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置<br>highlight_shrink【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</p><h2 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">comments:</span><br><span class="line">cover:</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author:</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside:</span><br></pre></td></tr></table></figure><p>title【必需】文章标题<br>date【必需】文章创建日期<br>updated【可选】文章更新日期<br>tags【可选】文章标籤<br>categories【可选】文章分类<br>keywords【可选】文章关键字<br>description【可选】文章描述<br>top_img【可选】文章顶部图片<br>cover【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)<br>comments【可选】显示文章评论模块(默认 true)<br>toc【可选】显示文章TOC(默认为设置中toc的enable配置)<br>toc_number【可选】显示toc_number(默认为设置中toc的number配置)<br>copyright【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)<br>copyright_author【可选】文章版权模块的文章作者<br>copyright_author_href【可选】文章版权模块的文章作者链接<br>copyright_url【可选】文章版权模块的文章连结链接<br>copyright_info【可选】文章版权模块的版权声明文字<br>mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)<br>katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)<br>aplayer【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置<br>highlight_shrink【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)<br>aside【可选】显示侧边栏 (默认 true)</p><p>作者: Jerry<br>連結: <a href="https://butterfly.js.org/posts/dc584b87/#Page-Front-matter">https://butterfly.js.org/posts/dc584b87/#Page-Front-matter</a><br>來源: Butterfly</p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly文章格式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
