<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rabbitmq配置和原理</title>
      <link href="/2024/09/11/rabbtimq%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/09/11/rabbtimq%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_mqtt &amp;&amp;</span><br><span class="line">rabbitmq-plugins enable rabbitmq_web_mqtt &amp;&amp;</span><br><span class="line">rabbitmq-plugins enable rabbitmq_web_stomp &amp;&amp;</span><br><span class="line">rabbitmq-plugins enable rabbitmq_web_stomp_examples &amp;&amp;</span><br><span class="line">rabbitmqctl stop_app &amp;&amp;</span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure><h3 id="rabbitmq-交换机与路由键的解释"><a href="#rabbitmq-交换机与路由键的解释" class="headerlink" title="rabbitmq 交换机与路由键的解释"></a>rabbitmq 交换机与路由键的解释</h3><h4 id="Direct-Exchange（直连交换机）"><a href="#Direct-Exchange（直连交换机）" class="headerlink" title="Direct Exchange（直连交换机）"></a>Direct Exchange（直连交换机）</h4><blockquote><p>用途：基于完全匹配的路由键（Routing Key）将消息发送到队列。<br>业务场景：适合一对一或多对一的消息路由场景，例如，将特定类型的消息路由到处理该类型消息的服务。<br>路由键使用：消息发送时带有特定的路由键，队列绑定到交换机时也指定了相同的路由键。只有当消息的路由键与队列绑定时指定的路由键完全相同时，消息才会被路由到队列。</p></blockquote><h4 id="Fanout-Exchange（扇形交换机）"><a href="#Fanout-Exchange（扇形交换机）" class="headerlink" title="Fanout Exchange（扇形交换机）"></a>Fanout Exchange（扇形交换机）</h4><blockquote><p>用途：将消息广播到所有绑定到该交换机的队列。<br>业务场景：适合一对多的消息广播场景，例如，将一条消息发送给多个订阅者。<br>路由键使用：Fanout 交换机不使用路由键，所有发送到该交换机的消息都会被复制并发送到所有绑定的队列。</p></blockquote><h4 id="Topic-Exchange（主题交换机）"><a href="#Topic-Exchange（主题交换机）" class="headerlink" title="Topic Exchange（主题交换机）"></a>Topic Exchange（主题交换机）</h4><blockquote><p>用途：基于模式匹配的路由键将消息发送到队列。<br>业务场景：适合一对多的消息路由场景，特别是当需要根据某种规则（如通配符）来路由消息时。<br>路由键使用：路由键可以使用通配符 *（匹配一个单词）和 #（匹配零个或多个单词）。队列绑定到交换机时指定的路由键模式决定了消息如何被路由。</p></blockquote><h4 id="Headers-Exchange（标头交换机）"><a href="#Headers-Exchange（标头交换机）" class="headerlink" title="Headers Exchange（标头交换机）"></a>Headers Exchange（标头交换机）</h4><blockquote><p>用途：基于消息的头部信息（Headers）来决定消息的路由。<br>业务场景：适合需要复杂消息匹配的场景，例如，当需要根据消息的多个属性来决定路由时。<br>路由键使用：Headers 交换机不使用路由键，而是使用消息头部的信息来进行匹配。</p></blockquote><h4 id="Default-Exchange（默认交换机）"><a href="#Default-Exchange（默认交换机）" class="headerlink" title="Default Exchange（默认交换机）"></a>Default Exchange（默认交换机）</h4><blockquote><p>用途：默认交换机没有名称，默认情况下，如果消息发布时不指定交换机，则会使用默认交换机。<br>业务场景：适用于简单的点对点通信场景。<br>路由键使用：路由键被解释为队列名称，消息会被路由到与路由键名称相同的队列。</p></blockquote><h4 id="那消费者是绑定队列还是交换机呢"><a href="#那消费者是绑定队列还是交换机呢" class="headerlink" title="那消费者是绑定队列还是交换机呢"></a>那消费者是绑定队列还是交换机呢</h4><blockquote><p>在 RabbitMQ 中，消费者实际上是绑定到队列上的，而不是直接绑定到交换机。消息的流动过程如下：<br>生产者：生产者发送消息到一个特定的交换机（Exchange），并指定一个路由键（Routing Key）。<br>交换机：交换机会根据消息的路由键以及自身配置的类型（例如 Direct、Fanout、Topic 或 Headers），决定将消息发送到哪些队列。<br>队列：队列接收来自交换机的消息，并保存这些消息直到它们被消费者消费。<br>消费者：消费者绑定到队列上，并从队列中消费消息。<br>绑定关系<br>交换机与队列：交换机与队列之间的绑定是由队列绑定到交换机时指定的路由键来决定的。队列可以绑定到一个或多个交换机，并且每个绑定可以有不同的路由键。<br>消费者与队列：消费者通过订阅队列来消费消息。消费者可以订阅一个或多个队列。</p></blockquote><h4 id="那如果我要给100个用户发送属于用户自己的消息，那岂不是要起100个队列一个交换机"><a href="#那如果我要给100个用户发送属于用户自己的消息，那岂不是要起100个队列一个交换机" class="headerlink" title="那如果我要给100个用户发送属于用户自己的消息，那岂不是要起100个队列一个交换机?"></a>那如果我要给100个用户发送属于用户自己的消息，那岂不是要起100个队列一个交换机?</h4><blockquote><p>确实，如果你需要给 100 个用户发送各自专属的消息，你可以考虑使用一个交换机和多个队列。具体来说，你可以为每个用户创建一个队列，并将这些队列绑定到同一个交换机上。这样，每个用户的消息就可以通过交换机路由到对应的队列。<br>方案概述<br>创建一个交换机：例如，创建一个 Direct 类型的交换机。<br>为每个用户创建一个队列：每个用户的队列名称可以是用户的唯一标识符。<br>绑定队列到交换机：将每个用户的队列绑定到交换机，并指定相应的路由键（通常是队列名称）。<br>发送消息：生产者发送消息时指定用户的路由键，交换机会将消息路由到对应的队列。<br>消费者订阅队列：每个用户订阅自己的队列来消费消息。</p></blockquote><h4 id="那如果使用rocketmq-是不是可以不用100个队列呢"><a href="#那如果使用rocketmq-是不是可以不用100个队列呢" class="headerlink" title="那如果使用rocketmq 是不是可以不用100个队列呢"></a>那如果使用rocketmq 是不是可以不用100个队列呢</h4><blockquote><p>在 RocketMQ 中，你可以使用更灵活的方式来处理这种情况，而不需要为每个用户创建单独的队列。RocketMQ 提供了多种机制来实现高效的消息生产和消费，包括标签（Tag）和消息过滤（SQL92）。<br>方案概述<br>创建一个 Topic：创建一个共享的 Topic，例如 user_messages。<br>使用 Tag：为每个用户的消息设置不同的 Tag。<br>消费者订阅 Topic 并过滤 Tag：每个消费者订阅 Topic 并根据 Tag 过滤消息。<br>示例代码</p></blockquote><h4 id="那要是几十万的用户那不是几十万个队列么，这怎么维护啊，没有解决办法"><a href="#那要是几十万的用户那不是几十万个队列么，这怎么维护啊，没有解决办法" class="headerlink" title="那要是几十万的用户那不是几十万个队列么，这怎么维护啊，没有解决办法?"></a>那要是几十万的用户那不是几十万个队列么，这怎么维护啊，没有解决办法?</h4><blockquote><p>在处理几十万用户的情况下，使用 RabbitMQ 也需要一种更高效的方案来管理和分发消息。以下是一些可能的解决方案：<br>使用 Topic Exchange 和消息过滤<br>通过使用 Topic Exchange 和消息过滤，可以避免为每个用户创建单独的队列。<br>方案概述<br>创建一个 Topic Exchange：创建一个共享的 Topic Exchange。<br>为每个用户创建一个队列：为每个用户创建一个队列。<br>绑定队列到 Topic Exchange：使用特定的绑定键（例如用户 ID）将队列绑定到 Topic Exchange。<br>发送消息：使用特定的路由键将消息发送到 Topic Exchange。<br>消费者订阅队列：每个消费者订阅自己的队列来消费消息。</p></blockquote><h4 id=""><a href="#" class="headerlink" title=""></a></h4><blockquote><p>RocketMQ：<br>Tag 用于消息分类和过滤。<br>发布消息时可以指定 Tag。<br>消费消息时可以根据 Tag 进行过滤。<br>RabbitMQ：<br>Tag 主要用于标识消费者。<br>消费者订阅队列时会获得一个唯一的 Tag。<br>可以通过消息属性设置自定义字段，但不是标准的 Tag 概念。</p></blockquote><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><blockquote><blockquote><p> RocketMQ 中的 Tag 用于消息分类和过滤。<br>RabbitMQ 中的 Tag 主要用于标识消费者，也可以通过消息属性设置自定义字段。</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署rocketmq5.3</title>
      <link href="/2024/09/11/rokcetmq%E9%83%A8%E7%BD%B2/"/>
      <url>/2024/09/11/rokcetmq%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">  namesrv:</span><br><span class="line">    image: apache/rocketmq:5.3.0</span><br><span class="line">    container_name: rmqnamesrvnew</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;9876:9876&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - rocketmq</span><br><span class="line">    command: sh mqnamesrv</span><br><span class="line"></span><br><span class="line">  broker:</span><br><span class="line">    image: apache/rocketmq:5.3.0</span><br><span class="line">    container_name: rmqbrokernew</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;10909:10909&quot;</span><br><span class="line">      - &quot;10911:10911&quot;</span><br><span class="line">      - &quot;10912:10912&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - NAMESRV_ADDR=rmqnamesrvnew:9876</span><br><span class="line">    depends_on:</span><br><span class="line">      - namesrv</span><br><span class="line">    networks:</span><br><span class="line">      - rocketmq</span><br><span class="line">    command: sh mqbroker</span><br><span class="line"></span><br><span class="line">  proxy:</span><br><span class="line">    image: apache/rocketmq:5.3.0</span><br><span class="line">    container_name: rmqproxynew</span><br><span class="line">    networks:</span><br><span class="line">      - rocketmq</span><br><span class="line">    depends_on:</span><br><span class="line">      - broker</span><br><span class="line">      - namesrv</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8082:8082&quot;</span><br><span class="line">      - &quot;8081:8081&quot;</span><br><span class="line">    restart: on-failure</span><br><span class="line">    environment:</span><br><span class="line">      - NAMESRV_ADDR=rmqnamesrvnew:9876</span><br><span class="line">    command: sh mqproxy</span><br><span class="line"></span><br><span class="line">  console:</span><br><span class="line">    image: apacherocketmq/rocketmq-dashboard:latest</span><br><span class="line">    container_name: rmqconsolenew</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8083:8080&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - JAVA_OPTS=-Drocketmq.namesrv.addr=rmqnamesrvnew:9876</span><br><span class="line">    depends_on:</span><br><span class="line">      - namesrv</span><br><span class="line">    networks:</span><br><span class="line">      - rocketmq</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  rocketmq:</span><br><span class="line">    driver: bridge</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rocketmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab 备份和恢复</title>
      <link href="/2024/07/19/gitlab/"/>
      <url>/2024/07/19/gitlab/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="备份gitlab"><a href="#备份gitlab" class="headerlink" title="备份gitlab"></a>备份gitlab</h3><blockquote><p>声明: 一切备份和恢复操作, 都是在gitlab容器内操作，不是在宿主机上操作</p></blockquote><h4 id="自定义命名创建备份卷"><a href="#自定义命名创建备份卷" class="headerlink" title="自定义命名创建备份卷"></a>自定义命名创建备份卷</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.进入容器</span><br><span class="line">docker exec -it or ID &lt;容器名 &gt;bash</span><br><span class="line"></span><br><span class="line">2.创建卷</span><br><span class="line">cd /var/opt/gitlab/backups</span><br><span class="line"></span><br><span class="line">3.执行备份</span><br><span class="line">gitlab-rake gitlab:backup:create</span><br><span class="line"></span><br><span class="line">4.查看备份文件</span><br><span class="line">ls -l</span><br><span class="line"></span><br><span class="line">5.退出容器</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">6.拷贝至宿主机</span><br><span class="line">docker cp &lt;容器名&gt;:/var/opt/gitlab/backups/&lt;备份文件名&gt; home/gitlab/opt/gitlab/backups/&lt;备份文件名&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="在新宿主机上恢复备份"><a href="#在新宿主机上恢复备份" class="headerlink" title="在新宿主机上恢复备份"></a>在新宿主机上恢复备份</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">远程传输文件</span></span><br><span class="line">scp -r /home/gitlab/opt/gitlab/backups/&lt;备份文件名&gt; root@192.168.1.1:home/gitlab/opt/gitlab/backups/&lt;备份文件名&gt;</span><br><span class="line"></span><br><span class="line">1.将备份卷挂载复制到新宿主机的新gitlab容器中</span><br><span class="line">docker cp -r /home/gitlab/opt/gitlab/backups/&lt;备份文件名&gt; &lt;新容器名&gt;:/var/opt/gitlab/backups/&lt;备份文件名&gt;</span><br><span class="line"></span><br><span class="line">2.进入容器</span><br><span class="line">docker exec -it &lt;新容器名&gt; bash</span><br><span class="line"></span><br><span class="line">3.停止服务</span><br><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br><span class="line"></span><br><span class="line">4.执行恢复</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意一般备份的文件名 类型这种1721981045_2024_07_26_11.1.4_gitlab_backup.tar  这里使用恢复命令时只需要</span></span><br><span class="line">gitlab-rake gitlab:backup:restore BACKUP=1721981045_2024_07_26_11.1.4 即可</span><br><span class="line"></span><br><span class="line">5.恢复完成后退出容器</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">6.重启服务</span><br><span class="line">docker restart &lt;新容器名&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="定时备份"><a href="#定时备份" class="headerlink" title="定时备份"></a>定时备份</h4><h5 id="创建备份和定时清理脚本"><a href="#创建备份和定时清理脚本" class="headerlink" title="创建备份和定时清理脚本"></a>创建备份和定时清理脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GitLab容器名称或ID</span></span><br><span class="line">CONTAINER_NAME=gitlab</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">宿主机上的备份目录</span></span><br><span class="line">BACKUP_DIR=/home/tools/gitlab/backup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志文件</span></span><br><span class="line">LOG_FILE=/home/tools/gitlab/logs/backup.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行备份</span></span><br><span class="line">docker exec -t $CONTAINER_NAME gitlab-rake gitlab:backup:create &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查备份命令是否成功</span></span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">    echo &quot;$(date): ----备份 gitlab 数据错误!&quot; &gt;&gt; $LOG_FILE</span><br><span class="line">    echo &quot;&quot; &gt;&gt; $LOG_FILE  # 输出空行</span><br><span class="line">else</span><br><span class="line">    echo &quot;$(date): ----备份 已完成.&quot; &gt;&gt; $LOG_FILE</span><br><span class="line">    echo &quot;&quot; &gt;&gt; $LOG_FILE  # 输出空行</span><br><span class="line">    </span><br><span class="line">    # 获取容器内最新的备份文件名</span><br><span class="line">    LATEST_BACKUP=$(docker exec $CONTAINER_NAME ls /var/opt/gitlab/backups | grep gitlab_backup | sort -r | head -n 1)</span><br><span class="line">    </span><br><span class="line">    # 将新备份从容器复制到宿主机</span><br><span class="line">    docker cp $CONTAINER_NAME:/var/opt/gitlab/backups/$LATEST_BACKUP $BACKUP_DIR/</span><br><span class="line">    </span><br><span class="line">    # 删除容器内的这个备份文件</span><br><span class="line">    docker exec -t $CONTAINER_NAME rm -f /var/opt/gitlab/backups/$LATEST_BACKUP</span><br><span class="line">    </span><br><span class="line">    # 清理宿主机上的旧备份，但保留最新的两个</span><br><span class="line">    cd $BACKUP_DIR</span><br><span class="line">    BACKUPS=$(ls -1t | grep gitlab_backup)</span><br><span class="line">    if [ &quot;$(echo &quot;$BACKUPS&quot; | wc -l)&quot; -gt 2 ]; then</span><br><span class="line">        for backup in $(echo &quot;$BACKUPS&quot; | tail -n +3); do</span><br><span class="line">            rm -f $backup</span><br><span class="line">        done</span><br><span class="line">    fi</span><br><span class="line">    </span><br><span class="line">    echo &#x27;已删除主机上的旧备份，保留最新的两个备份.&#x27; &gt;&gt; $LOG_FILE</span><br><span class="line">    echo &#x27;从容器中删除的最新备份文件.&#x27; &gt;&gt; $LOG_FILE</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="Cron-Job-定时任务"><a href="#Cron-Job-定时任务" class="headerlink" title="Cron Job 定时任务"></a>Cron Job 定时任务</h4><h5 id="编辑crontab"><a href="#编辑crontab" class="headerlink" title="编辑crontab:"></a>编辑crontab:</h5><blockquote><p> crontab -e</p></blockquote><h5 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务:"></a>添加定时任务:</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 * * * /home/tools/gitlab/gitlab_backup_and_cleanup.sh</span><br></pre></td></tr></table></figure><h4 id="列出定时任务"><a href="#列出定时任务" class="headerlink" title="列出定时任务"></a>列出定时任务</h4><blockquote><p>crontab -l</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> gitlab,shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql常用命令</title>
      <link href="/2024/07/08/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/07/08/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql拓展篇</title>
      <link href="/2024/07/08/mysql%E6%8B%93%E5%B1%95%E7%AF%87/"/>
      <url>/2024/07/08/mysql%E6%8B%93%E5%B1%95%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="mysql拓展篇之分库分表"><a href="#mysql拓展篇之分库分表" class="headerlink" title="mysql拓展篇之分库分表"></a>mysql拓展篇之分库分表</h3><h5 id="什么是分库分表，为什么我们需要分库分表"><a href="#什么是分库分表，为什么我们需要分库分表" class="headerlink" title="+ 什么是分库分表，为什么我们需要分库分表"></a>+ 什么是分库分表，为什么我们需要分库分表</h5><h5 id="如何进行分库分表，有什么优缺点"><a href="#如何进行分库分表，有什么优缺点" class="headerlink" title="+ 如何进行分库分表，有什么优缺点"></a>+ 如何进行分库分表，有什么优缺点</h5><h5 id="对于分库分表有哪些架构设计，对于后期的扩容扩展怎么样"><a href="#对于分库分表有哪些架构设计，对于后期的扩容扩展怎么样" class="headerlink" title="+ 对于分库分表有哪些架构设计，对于后期的扩容扩展怎么样"></a>+ 对于分库分表有哪些架构设计，对于后期的扩容扩展怎么样</h5><h5 id="目前行业内流行的解决方案有哪些？各自有什么特点"><a href="#目前行业内流行的解决方案有哪些？各自有什么特点" class="headerlink" title="+ 目前行业内流行的解决方案有哪些？各自有什么特点"></a>+ 目前行业内流行的解决方案有哪些？各自有什么特点</h5><h5 id="自己设计一个数据库分库分表的框架，如何设计，需要考虑哪些因素"><a href="#自己设计一个数据库分库分表的框架，如何设计，需要考虑哪些因素" class="headerlink" title="+ 自己设计一个数据库分库分表的框架，如何设计，需要考虑哪些因素"></a>+ 自己设计一个数据库分库分表的框架，如何设计，需要考虑哪些因素</h5>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法.md</title>
      <link href="/2024/06/18/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/06/18/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h4 id="字体语法"><a href="#字体语法" class="headerlink" title="字体语法"></a>字体语法</h4><p>   <em>这里是文字</em><br>   <em>这里是文字</em><br>   <strong>这里是文字</strong><br>   <em><strong>这里是文字</strong></em><br>   <del>这里是文字</del></p><h4 id="设计字体、字号和颜色"><a href="#设计字体、字号和颜色" class="headerlink" title="设计字体、字号和颜色"></a>设计字体、字号和颜色</h4><p>   3.1 字体颜色<br>      <font face='黑体' color=#ff0000 size=4>我是正文</font><br>   3.2 背景色<br>     <table><tr><td bgcolor=orange>背景色是：orange</td></tr></table></p><h4 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h4><p>   <a href="baidu.com">百度一下，你就知道</a><br>  4.1 给链接增加一个Title<br>   <a href="baidu.com,%22%E6%90%9C%E7%B4%A2%E7%BD%91%E7%AB%99%22">百度一下，你就知道</a></p><p>####图片链接<br>   <img src="/img/background.jpg" alt="图片解释性内容"><br>   5.1 图片超链接<br>   <a href="%E8%B7%B3%E8%BD%AC%E9%93%BE%E6%8E%A5"><img src="/...%5B%E7%9B%B8%E5%85%B3%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%5D" alt="我的博客主页"></a></p><h4 id="自动生成超链接"><a href="#自动生成超链接" class="headerlink" title="自动生成超链接"></a>自动生成超链接</h4><pre><code>&lt;&quot;...[相关链接]&quot;&gt;</code></pre><h4 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h4><h4 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h4><h4 id="分割线语法"><a href="#分割线语法" class="headerlink" title="分割线语法"></a>分割线语法</h4><h2 id="多个星号-破折号-—"><a href="#多个星号-破折号-—" class="headerlink" title="   多个星号 (***)   ***   破折号(—) "></a>   多个星号 (***)<br>   ***<br>   破折号(—) </h2><h2 id="下划线"><a href="#下划线" class="headerlink" title="   下划线 (___)"></a>   下划线 (___)</h2><h4 id="包裹转义代码"><a href="#包裹转义代码" class="headerlink" title="包裹转义代码"></a>包裹转义代码</h4><pre><code>``printf(&quot;hello world&quot;);``//这是markdown语法&lt;code&gt;printf(&quot;hello world&quot;);&lt;/code&gt; //这是HTML语法</code></pre><h4 id="代码块-“-”"><a href="#代码块-“-”" class="headerlink" title="代码块 “&#96;&#96;&#96;&#96;&#96;&#96;”"></a>代码块 “&#96;&#96;&#96;&#96;&#96;&#96;”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="引用-“-”"><a href="#引用-“-”" class="headerlink" title="引用 “ &gt;”"></a>引用 “ &gt;”</h4><blockquote><p>引用</p><blockquote><p>嵌套引用</p><blockquote><p>在嵌套</p></blockquote></blockquote></blockquote><h4 id="引用包含其他语法"><a href="#引用包含其他语法" class="headerlink" title="引用包含其他语法"></a>引用包含其他语法</h4><blockquote><p><em><strong>heheh</strong></em></p></blockquote><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><ul><li>我是无序列表</li><li>我是无序列表</li></ul><ul><li>我是无序列表</li><li>我是无序列表</li></ul><ul><li>我是无序列表</li><li>我是无序列表</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><pre><code>1. 我是有序列表2. 我是有序列表3. 我是有序列表</code></pre><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><table><thead><tr><th>姓名</th><th>学号</th><th>分数</th></tr></thead><tbody><tr><td>孙悟空</td><td>2021</td><td>95</td></tr><tr><td>猪八戒</td><td>20211</td><td>96</td></tr></tbody></table><h4 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h4><p> \          表示一个反斜线<br> *          表示一个*<br> {}        表示一个{}<br> …（其他的类似，不再举例）</p><ol><li>其他特殊字符<a href="https://unicode-table.com/cn/">特殊符号链接</a><br>&#10003;   它是一个√<br>&#10052;   它是一个❄</li></ol><h4 id="Latex数学公式"><a href="#Latex数学公式" class="headerlink" title="Latex数学公式"></a>Latex数学公式</h4><pre><code>1. 指数与下标   语法形式：$a^3_&#123;2&#125;$2. 平方根   语法形式：$\sqrt&#123;x&#125;$3. 在上方或者下方的下划线(可以表示取反等)   语法形式：$\overline&#123;m+n&#125;$   和      $\underline&#123;m+n&#125;$4. 向量   $\vec a$表示向量a   $\overrightarrow&#123;AB&#125;$  表示向量AB，箭头指向右(即A-&gt;B)   $\overleftarrow&#123;AB&#125;$   表示向量BA，箭头指向左(即A&lt;-B)5. 分数   $\frac&#123;x^&#123;2&#125;&#125;&#123;k+1&#125;$6. 积分、求和、求积运算符   求和：$\sum_&#123;i=1&#125;^&#123;n&#125;$//按照$\sum_&#123;...&#125;^&#123;...&#125;$的格式   积分：$\int_&#123;0&#125;^&#123;\pi&#125;$//按照$\int_&#123;...&#125;^&#123;...&#125;$的格式   求积：$\prod_&#123;0&#125;^&#123;n&#125;$//同上两种类似，按照$\prod_&#123;...&#125;^&#123;...&#125;$的格式</code></pre><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><pre><code>tag=&gt;type: content:&gt;url</code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p> st&#x3D;&gt;start: 开始<br> e&#x3D;&gt;end: 结束<br> op&#x3D;&gt;operation: 操作<br> sub1&#x3D;&gt;subroutine: 程序1<br> cond&#x3D;&gt;condition: Yes or No?<br> io&#x3D;&gt;inputoutput: 输入&#x2F;输出<br> st-&gt;op-&gt;cond<br> cond(yes)-&gt;io-&gt;e<br> cond(no)-&gt;sub1(right)-&gt;op</p>]]></content>
      
      
      <categories>
          
          <category> 攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="/2024/06/16/docker/"/>
      <url>/2024/06/16/docker/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="私有仓库搭建问题"><a href="#私有仓库搭建问题" class="headerlink" title="私有仓库搭建问题"></a>私有仓库搭建问题</h2><h3 id="拉取私有仓库镜像"><a href="#拉取私有仓库镜像" class="headerlink" title="拉取私有仓库镜像"></a>拉取私有仓库镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry:2</span><br></pre></td></tr></table></figure><h3 id="启动命令-无密码"><a href="#启动命令-无密码" class="headerlink" title="启动命令(无密码)"></a>启动命令(无密码)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name my-registry -p 5000:5000 registry:2</span><br></pre></td></tr></table></figure><h3 id="服务器安全组-5000端口允许外部访问"><a href="#服务器安全组-5000端口允许外部访问" class="headerlink" title="服务器安全组 5000端口允许外部访问"></a>服务器安全组 5000端口允许外部访问</h3><h3 id="登录私有仓库（未设置密码跳过该项）"><a href="#登录私有仓库（未设置密码跳过该项）" class="headerlink" title="登录私有仓库（未设置密码跳过该项）"></a>登录私有仓库（未设置密码跳过该项）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login &lt;ip&gt;:5000</span><br></pre></td></tr></table></figure><h3 id="推送镜像到私有仓库"><a href="#推送镜像到私有仓库" class="headerlink" title="推送镜像到私有仓库"></a>推送镜像到私有仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag my_image:tag &lt;ip &gt;:5000/my_image:tag</span><br><span class="line">docker push &lt;ip &gt;:5000/my_image:tag</span><br></pre></td></tr></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull &lt;ip&gt;/my_image:tag</span><br></pre></td></tr></table></figure><h3 id="查询私有仓库镜像列表"><a href="#查询私有仓库镜像列表" class="headerlink" title="查询私有仓库镜像列表"></a>查询私有仓库镜像列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search --filter is-official=<span class="literal">false</span> --filter is-automated=<span class="literal">false</span> &lt;ip&gt;:5000/my_image</span><br></pre></td></tr></table></figure><h3 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="拉取镜像时-提示非信任-处理方法"><a href="#拉取镜像时-提示非信任-处理方法" class="headerlink" title="拉取镜像时 提示非信任 处理方法"></a>拉取镜像时 提示非信任 处理方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull --disable-content-trust=<span class="literal">true</span> &lt;ip&gt;:5000/redis:<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="不使用仓库本地迁移镜像"><a href="#不使用仓库本地迁移镜像" class="headerlink" title="不使用仓库本地迁移镜像"></a>不使用仓库本地迁移镜像</h2><h3 id="将镜像构建tar文件并指定目录"><a href="#将镜像构建tar文件并指定目录" class="headerlink" title="将镜像构建tar文件并指定目录"></a>将镜像构建tar文件并指定目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o /path/to/save/my_image_latest.tar my_image:latest</span><br></pre></td></tr></table></figure><h3 id="将tar包加载成镜像-可以到其他服务器去加载成镜像"><a href="#将tar包加载成镜像-可以到其他服务器去加载成镜像" class="headerlink" title="将tar包加载成镜像(可以到其他服务器去加载成镜像)"></a>将tar包加载成镜像(可以到其他服务器去加载成镜像)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i /path/to/my_image_latest.tar</span><br></pre></td></tr></table></figure><h2 id="docker-容器内操作"><a href="#docker-容器内操作" class="headerlink" title="docker 容器内操作"></a>docker 容器内操作</h2><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container_name_or_id&gt; /bin/bash</span><br></pre></td></tr></table></figure><h2 id="docker-run-命令"><a href="#docker-run-命令" class="headerlink" title="docker run 命令"></a>docker run 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">-d, --detach</span><br><span class="line">将容器放在后台运行（守护进程模式），并返回容器ID。</span><br><span class="line"></span><br><span class="line">-i, --interactive</span><br><span class="line">使容器的标准输入保持打开，通常与 -t 一起使用以允许容器接收输入。</span><br><span class="line"></span><br><span class="line">-t, --<span class="built_in">tty</span></span><br><span class="line">分配一个伪终端（TTY）给容器，使得它能够支持命令行交互。</span><br><span class="line"></span><br><span class="line">--name NAME</span><br><span class="line">为容器指定一个名称。</span><br><span class="line"></span><br><span class="line">-e, --<span class="built_in">env</span></span><br><span class="line">设置环境变量，格式为 -e VAR_NAME=VAR_VALUE。</span><br><span class="line"></span><br><span class="line">-p, --publish</span><br><span class="line">映射容器端口到宿主机端口，格式为 -p hostPort:containerPort 或 -p ip:hostPort:containerPort。</span><br><span class="line"></span><br><span class="line">-v, --volume</span><br><span class="line">绑定宿主机目录到容器内目录，格式为 -v hostDir:containerDir 或 -v <span class="built_in">type</span>:hostDir:containerDir。</span><br><span class="line"></span><br><span class="line">--restart</span><br><span class="line">设置容器的重启策略，如 no, on-failure, always, unless-stopped。</span><br><span class="line"></span><br><span class="line">-m, --memory</span><br><span class="line">限制容器可以使用的最大内存量，如 -m 1g 表示1GB。</span><br><span class="line"></span><br><span class="line">--network</span><br><span class="line">指定容器的网络模式，如 bridge（默认）、host、none 或自定义网络。</span><br><span class="line"></span><br><span class="line">--cpus</span><br><span class="line">限制容器可以使用的CPU核心数或CPU份额。</span><br><span class="line"></span><br><span class="line">--device</span><br><span class="line">允许容器访问宿主机的硬件设备。</span><br><span class="line"></span><br><span class="line">-u, --user</span><br><span class="line">指定容器运行的用户或UID。</span><br><span class="line"></span><br><span class="line">--<span class="built_in">rm</span></span><br><span class="line">当容器退出后自动删除它。</span><br><span class="line"></span><br><span class="line">-w, --workdir</span><br><span class="line">指定容器的工作目录。</span><br><span class="line"></span><br><span class="line">--entrypoint</span><br><span class="line">覆盖镜像的默认入口点。</span><br><span class="line"></span><br><span class="line">--label</span><br><span class="line">添加元数据标签给容器，格式为 --label key=value。</span><br><span class="line"></span><br><span class="line">--privileged</span><br><span class="line">给予容器更多的权限，包括对设备的访问等。</span><br><span class="line">这只是 docker run 支持的一部分参数，更多高级选项和详细信息可以通过运行 docker run --<span class="built_in">help</span> 或查阅 Docker 官方文档获得。使用这些参数可以根据具体需求定制容器的运行环境和行为。</span><br></pre></td></tr></table></figure><h2 id="docker-查看运行参数"><a href="#docker-查看运行参数" class="headerlink" title="docker 查看运行参数"></a>docker 查看运行参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect &lt;container_name_or_id&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2024/06/15/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/06/15/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="解压zip-文件"><a href="#解压zip-文件" class="headerlink" title="解压zip 文件"></a>解压zip 文件</h2><h3 id="下载unzip"><a href="#下载unzip" class="headerlink" title="下载unzip"></a>下载unzip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install unzip</span><br></pre></td></tr></table></figure><h3 id="解压到当前目录下"><a href="#解压到当前目录下" class="headerlink" title="解压到当前目录下"></a>解压到当前目录下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip xxx.zip</span><br></pre></td></tr></table></figure><h3 id="解压到指定目录下"><a href="#解压到指定目录下" class="headerlink" title="解压到指定目录下"></a>解压到指定目录下</h3><blockquote><p>比如 &#x2F;path&#x2F;to&#x2F;extract&#x2F;to</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip xxx.zip -d /path/to/extract/to</span><br></pre></td></tr></table></figure><h2 id="chmod赋予权限"><a href="#chmod赋予权限" class="headerlink" title="chmod赋予权限"></a>chmod赋予权限</h2><h3 id="以-chmod-777-xxx-txt-为例"><a href="#以-chmod-777-xxx-txt-为例" class="headerlink" title="以 chmod 777  xxx.txt 为例"></a>以 chmod 777  xxx.txt 为例</h3><blockquote><ul><li>第一位数字代表文件所有者的权限</li><li>第二位数字代表文件所属组的权限</li><li>第三位数字代表其他用户的权限</li></ul><ul><li>数字模式:<blockquote><ul><li>在八进制表示法中，权限被分为读（r&#x3D;4）、写（w&#x3D;2）、执行（x&#x3D;1）,“7”意味着开启所有权限（读4 + 写2 + 执行1 &#x3D; 7)</li></ul></blockquote></li><li>符号模式:<blockquote><ul><li>u 代表所有者，g 代表所属组，o 代表其他人，a 代表所有人（u, g, o的总和）。 添加权限，- 移除权限，&#x3D; 设置权限。</li><li>举例<blockquote><ul><li>1.1.1 给文件的所有者增加写权限:<br> chmod u+w myfile.txt</li><li>1.2.2 移除文件的组用户执行权限：<br> chmod g-x myfile.txt</li><li>1.2.3 设置所有用户（所有者、组用户、其他用户）的权限为只读:<br> chmod a&#x3D;r myfile.txt</li></ul></blockquote></li></ul></blockquote></li></ul></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span> : 查看当前文件所在目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> .. :回到上一级目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span>(ll) : <span class="built_in">ls</span>列出当前文件夹下所有文件，ll比<span class="built_in">ls</span>更详细</span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> :新建一个文件如 <span class="built_in">touch</span> index.js 就会在当前目录下创建一个index.js文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> :删除一个文件，<span class="built_in">rm</span> index.js 就会把index.js文件删除</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> : 新建一个目录，就是新建一个文件夹</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -r :删除一个文件夹,<span class="built_in">rm</span> -r src 删除src目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf :递归删除目录  ** 切勿在linux环境下使用 <span class="built_in">rm</span> -rf / **</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> :移动文件 ,<span class="built_in">mv</span> index.html src; index.html 是要移动的文件，src 是移动到的目标目录位置</span><br><span class="line"></span><br><span class="line">reset :重新初始化终端/包括清屏</span><br><span class="line"></span><br><span class="line">clear :清屏</span><br><span class="line"></span><br><span class="line"><span class="built_in">history</span> :查看命令历史</span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span> :帮助</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> : 退出</span><br><span class="line"></span><br><span class="line"><span class="comment"># :表示注释</span></span><br></pre></td></tr></table></figure><h3 id="搜索关键字"><a href="#搜索关键字" class="headerlink" title="搜索关键字"></a>搜索关键字</h3><blockquote><p> find &#x2F; -name “nginx”</p></blockquote><h3 id="搜索关键字进程"><a href="#搜索关键字进程" class="headerlink" title="搜索关键字进程"></a>搜索关键字进程</h3><blockquote><p> ps aux | grep ngin</p></blockquote><h3 id="查找关键字安装路径"><a href="#查找关键字安装路径" class="headerlink" title="查找关键字安装路径"></a>查找关键字安装路径</h3><blockquote><p>rpm -ql nginx</p></blockquote><h3 id="查找关键字服务状态"><a href="#查找关键字服务状态" class="headerlink" title="查找关键字服务状态"></a>查找关键字服务状态</h3><blockquote><p>rpm -ql nginx</p></blockquote><h3 id="查找关键字可执行文件"><a href="#查找关键字可执行文件" class="headerlink" title="查找关键字可执行文件"></a>查找关键字可执行文件</h3><blockquote><p>whereis nginx<br>which nginx</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Es6</title>
      <link href="/2023/06/17/es6/"/>
      <url>/2023/06/17/es6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// const 和 let 的区别</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// const可以被覆盖而let不可被覆盖</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var str=&quot;事件&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(str)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var编辑的变量可以被覆盖</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// str=&quot;微信小程序&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(str)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// const 赋值的变量 常量不可改变，会报错</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// const str1=&quot;aa&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(str1)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// // str1=&quot;bb&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(str1)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// if(true)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var num=3</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这里const 和let定义的num 变量在外部都不可以访问,而var定义的在外部是可以访问的 ,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 同时let 定义的变量中的常量也不可以被覆盖</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// const num=3</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let num=3</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(num)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// es6的转译语法   `xxxxx`</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var name=&quot;小明&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var age=18</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var sex=&quot;男&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 传统的方式</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var object=&quot;我的名字:&quot;+name+&quot;我的年龄:&quot;+age+&quot;我的性别:&quot;+sex</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// document.write(object)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// es6的方式 不仅可以转译字符串，还可以转译html标签</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var object=`我的名字$&#123;name&#125;我的年龄:$&#123;age&#125;我的性别$&#123;sex&#125;`</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// document.write(&quot;&lt;br&gt;&quot;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// document.write(`&lt;Br&gt;`,object)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var ele=&quot;&lt;h1&gt;&lt;em&gt;学习es6&lt;/em&gt;&lt;/h1&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 普通的方式单行可以直接渲染,如果是多行就不行了如下</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var ele=&quot;&lt;h1&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// +&quot;&lt;em&gt;学习es6&lt;/em&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// +&quot;&lt;/h1&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// document.write(ele)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 而es6的方式</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var ele=`&lt;h1&gt;&lt;em&gt;学习</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// es6&lt;/em&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &lt;/h1&gt;`</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// document.write(ele)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// es6数组解构 </span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var arr=[111,222,333,444];</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 以往的方式</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// arr[0]</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// arr[1]</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(arr[1])</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// es6的方式 </span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// [a,b,c,d]=arr</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(a)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//es6特殊方式</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 比如333不需要使用&quot;,&quot;后面直接赋值为空</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// [a,b,,d]=arr</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(d)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// es6解构对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var data=&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// name:&quot;小明&quot;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// age:30,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// sex:&quot;男&quot;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// job:&quot;java开发&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 以往的方式</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(data.name)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// es6的方式  这里对象不同数组不用管顺序 直接使用变量就可以了</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var &#123;name,sex,job&#125;=data</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(name)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// es6箭头函数  只适用无参</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 普通方式</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> obj=&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&quot;小鸿&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// fun:function()&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// return  this.name</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// fun2()&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// return this.name</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(obj.fun())</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// es6箭头函数的方式</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var obj=&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// name:&quot;小明&quot;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// fun()&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// setTimeout(function()&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(this.name+&quot;这是函数&quot;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;,100)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// fun2()&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// setTimeout(()=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(this.name+&quot;这是es6箭头函数&quot;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;,100)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// obj.fun()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// es6for循环</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> arr=[<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>]</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">arr[i]=arr[i]+<span class="string">&quot;普通循环&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> newarr=[]</span></span><br><span class="line"><span class="language-javascript">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">item=item+<span class="string">&quot;AA&quot;</span></span></span><br><span class="line"><span class="language-javascript">newarr.<span class="title function_">push</span>(item)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(item,index)</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(newarr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> newarr1=arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> item+<span class="string">&quot;BB&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(newarr1)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> arr2=[<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">arr=arr.<span class="title function_">concat</span>(arr2)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> newArr3=[...arr,...arr2]</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr3)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/17/gitignor/"/>
      <url>/2023/06/17/gitignor/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#java</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line">#<span class="keyword">package</span> file</span><br><span class="line">*.war</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line">#maven ignore</span><br><span class="line">target/</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line">#eclipse ignore</span><br><span class="line">.settings/</span><br><span class="line">.project</span><br><span class="line">.classpatch</span><br><span class="line"></span><br><span class="line">#Intellij idea</span><br><span class="line">.idea/</span><br><span class="line">/idea/</span><br><span class="line">*.ipr</span><br><span class="line">*.iml</span><br><span class="line">*.iws</span><br><span class="line"></span><br><span class="line"># temp file</span><br><span class="line">*.log</span><br><span class="line">*.cache</span><br><span class="line">*.diff</span><br><span class="line">*.patch</span><br><span class="line">*.tmp</span><br><span class="line"></span><br><span class="line"># system ignore</span><br><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git命令</title>
      <link href="/2023/06/17/git%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/06/17/git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="git创建仓库"><a href="#git创建仓库" class="headerlink" title="git创建仓库"></a>git创建仓库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; git init&#x27;</span> 使用当前目录作为git仓库，init初始化即可  注意:该命令执行完成后会有一个 <span class="string">&quot;.git&quot;</span>的文件 ，但是是隐藏文件，测试的话可以点击查看隐藏文件</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git init [file_name] &#x27;</span> 指定一个目录为git仓库 如: git init git</span><br></pre></td></tr></table></figure><h3 id="git-克隆仓库"><a href="#git-克隆仓库" class="headerlink" title="git 克隆仓库"></a>git 克隆仓库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; git clone &lt;repo&gt;&#x27;</span> 仓库拷贝链接，例如 git clone https:<span class="comment">//gitee.com/xxx/demo.git</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git clone &lt;repo&gt; &lt;directory&gt;&#x27;</span> 克隆仓库到指定文件夹 git clone https:<span class="comment">//gitee.com/xxx/demo.git git</span></span><br><span class="line"></span><br><span class="line">* repo:Git 仓库。</span><br><span class="line">* directory:本地目录。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; git config --list&#x27;</span> 显示当前的 git 配置信息</span><br><span class="line"></span><br><span class="line"># 针对当前仓库 </span><br><span class="line"><span class="string">&#x27; git config -e&#x27;</span> 编辑 git 配置文件 </span><br><span class="line"></span><br><span class="line">#针对系统上所有仓库</span><br><span class="line"><span class="string">&#x27; git config -e --global&#x27;</span> 编辑 git 配置文件  </span><br><span class="line"></span><br><span class="line">#设置提交代码时的用户信息</span><br><span class="line"><span class="string">&#x27; git config --global user.name &quot;xxx&quot; &#x27;</span></span><br><span class="line"><span class="string">&#x27; git config --global user.email xxx@.xx.com&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h3><ul><li>git版本控制的操作原理<blockquote><p>1.添加至本地暂存区域<br>2.commit提交<br>3.推送至git仓库完成版本</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> *提交与修改</span><br><span class="line"><span class="string">&#x27; git add . &#x27;</span>  提交代码( add 后有一<span class="string">&#x27;.&#x27;</span>不要弄丢了)(提交至本地暂存区!<span class="string">&quot;还未上传至仓库&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git status&#x27;</span> 查看仓库当前的状态，显示有变更的文件</span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27; git diff&#x27;</span> 比较文件的不同，即暂存区和工作区的差异</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git reset&#x27;</span> 回退版本</span><br><span class="line"> </span><br><span class="line"> *提交日志</span><br><span class="line"><span class="string">&#x27; git log&#x27;</span> 查看历史提交记录</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git blame &lt;file&gt;&#x27;</span>  以列表形式查看指定文件的历史修改记录</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git mv&#x27;</span> 移动或重命名工作区文件</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git rm&#x27;</span> 删除工作区文件</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git commit -m  &quot;&lt;&lt;说明&gt;&gt;&quot;  &#x27;</span>  例如 git commit -m <span class="string">&quot;hello-word&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git push&#x27;</span>     推送代码</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git push origin master&#x27;</span> 推送至master主分支</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git push origin demo&#x27;</span>推送至demo分支</span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><blockquote><p>常规分支<br>master, 主分支<br> v1, 上线版本1<br> v2, 上线版本2<br> v3, 上线版本3<br> dev, 开发版本</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&#x27; git branch &#x27;</span> 列出当前所有(本地)分支</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git branch -r&#x27;</span> 列出所有远程分支 -r (remote:远程)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git branch [branch-name]&#x27;</span> 新建一个分支，但依然停留在当前分支</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git chekout -b [branch]&#x27;</span> 新建一个分支，并切换到该分支 -b (branch)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git merge [branch]&#x27;</span> 合并指定分支到当前分支</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git branch -d [branch-name]&#x27;</span> 删除分支 -d (delete)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git push origin --delete [branch-name]&#x27;</span> 删除远程分支</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; git branch -dr [remote/branch]&#x27;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Butterfly文章书写格式</title>
      <link href="/2023/06/17/hexo%20butterfly%E6%96%87%E7%AB%A0%E4%B9%A6%E5%86%99%E6%A0%BC%E5%BC%8F/"/>
      <url>/2023/06/17/hexo%20butterfly%E6%96%87%E7%AB%A0%E4%B9%A6%E5%86%99%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Front-matter<br>Front-matter 是档案最上方以 — 分隔的区域，用于指定个别档案的变数。</p><p>如果标注可选的参数，可根据自己需要添加，不用全部都写在markdown里</p><h2 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top_img:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aside:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br></pre></td></tr></table></figure><p>title【必需】页面标题<br>date【必需】页面创建日期<br>type【必需】标籤、分类和友情链接三个页面需要配置<br>updated【可选】页面更新日期<br>description【可选】页面描述<br>keywords【可选】页面关键字<br>comments【可选】显示页面评论模块(默认 true)<br>top_img【可选】页面顶部图片<br>mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)<br>katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)<br>aside【可选】显示侧边栏 (默认 true)<br>aplayer【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置<br>highlight_shrink【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</p><h2 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">comments:</span><br><span class="line">cover:</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author:</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside:</span><br></pre></td></tr></table></figure><p>title【必需】文章标题<br>date【必需】文章创建日期<br>updated【可选】文章更新日期<br>tags【可选】文章标籤<br>categories【可选】文章分类<br>keywords【可选】文章关键字<br>description【可选】文章描述<br>top_img【可选】文章顶部图片<br>cover【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)<br>comments【可选】显示文章评论模块(默认 true)<br>toc【可选】显示文章TOC(默认为设置中toc的enable配置)<br>toc_number【可选】显示toc_number(默认为设置中toc的number配置)<br>copyright【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)<br>copyright_author【可选】文章版权模块的文章作者<br>copyright_author_href【可选】文章版权模块的文章作者链接<br>copyright_url【可选】文章版权模块的文章连结链接<br>copyright_info【可选】文章版权模块的版权声明文字<br>mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)<br>katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)<br>aplayer【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置<br>highlight_shrink【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)<br>aside【可选】显示侧边栏 (默认 true)</p><p>作者: Jerry<br>連結: <a href="https://butterfly.js.org/posts/dc584b87/#Page-Front-matter">https://butterfly.js.org/posts/dc584b87/#Page-Front-matter</a><br>來源: Butterfly</p>]]></content>
      
      
      <categories>
          
          <category> 攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node_npm_vue</title>
      <link href="/2023/06/17/node_npm_vue/"/>
      <url>/2023/06/17/node_npm_vue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="node-npm-vue"><a href="#node-npm-vue" class="headerlink" title="node_npm_vue"></a>node_npm_vue</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">##全局拓展</span><br><span class="line"> npm install -g npm install -g <span class="meta">@vue</span>/cli-service-global</span><br><span class="line"></span><br><span class="line">##安装vue cli</span><br><span class="line"> cnpm install -g vue-cli|| npm install -g <span class="meta">@vue</span>/cli</span><br><span class="line"></span><br><span class="line">##升级安装vue</span><br><span class="line"> npm update -g <span class="meta">@vue</span>/cli升级安装</span><br><span class="line"></span><br><span class="line"> ##查看版本</span><br><span class="line"> vue -V</span><br><span class="line"></span><br><span class="line"> ##查看npm版本</span><br><span class="line"> npm -v</span><br><span class="line"></span><br><span class="line"> ##创建工程</span><br><span class="line"> vue create vue-hello</span><br><span class="line"></span><br><span class="line"> ##初始化工程</span><br><span class="line"> vue init webpack</span><br><span class="line"></span><br><span class="line"> ##运行开发环境</span><br><span class="line"> npm run dev</span><br><span class="line"></span><br><span class="line"> ##打包项目</span><br><span class="line"> npm run build:prod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 命令:</span><br><span class="line"></span><br><span class="line">npm install -g <span class="meta">@vue</span>/cli  安装vuecli</span><br><span class="line">vue --version 检查版本</span><br><span class="line"></span><br><span class="line">npm update -g <span class="meta">@vue</span>/cli升级安装</span><br><span class="line">上面列出来的命令是用于升级全局的 Vue CLI。</span><br><span class="line">如需升级项目中的 Vue CLI 相关模块（以 <span class="meta">@vue</span>/cli-plugin- 或 vue-cli-plugin- 开头），</span><br><span class="line">请在项目目录下运行 vue upgrade：</span><br><span class="line">用法： upgrade [options] [plugin-name]</span><br><span class="line">（试用）升级 Vue CLI 服务及插件</span><br><span class="line">选项：</span><br><span class="line">  -t, --to &lt;version&gt;    升级 &lt;plugin-name&gt; 到指定的版本</span><br><span class="line">  -f, --from &lt;version&gt;  跳过本地版本检测，默认插件是从此处指定的版本升级上来</span><br><span class="line">  -r, --registry &lt;url&gt;  使用指定的 registry 地址安装依赖</span><br><span class="line">  --all                 升级所有的插件</span><br><span class="line">  --next                检查插件新版本时，包括 alpha/beta/rc 版本在内</span><br><span class="line">  -h, --help            输出帮助内容</span><br><span class="line"></span><br><span class="line">你可以使用 vue serve 和 vue build 命令对单个 *.vue 文件进行快速原型开发，不过这需要先额外安装一个全局的扩展：</span><br><span class="line">npm install -g <span class="meta">@vue</span>/cli-service-global</span><br><span class="line"></span><br><span class="line">vue serve</span><br><span class="line">Usage: serve [options] [entry]</span><br><span class="line"></span><br><span class="line">在开发环境模式下零配置为 .js 或 .vue 文件启动一个服务器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">  -o, --open  打开浏览器</span><br><span class="line">  -c, --copy  将本地 URL 复制到剪切板</span><br><span class="line">  -h, --help  输出用法信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vue serve</span><br><span class="line">vue serve 使用了和 vue create 创建的项目相同的默认设置 (webpack、Babel、PostCSS 和 ESLint)。它会在当前目录自动推导入口文件——入口可以是 main.js、index.js、App.vue 或 app.vue 中的一个。你也可以显式地指定入口文件：</span><br><span class="line">vue serve MyComponent.vue</span><br><span class="line"></span><br><span class="line">vue build</span><br><span class="line">Usage: build [options] [entry]</span><br><span class="line"></span><br><span class="line">在生产环境模式下零配置构建一个 .js 或 .vue 文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">  -t, --target &lt;target&gt;  构建目标 (app | lib | wc | wc-async, 默认值：app)</span><br><span class="line">  -n, --name &lt;name&gt;      库的名字或 Web Components 组件的名字 (默认值：入口文件名)</span><br><span class="line">  -d, --dest &lt;dir&gt;       输出目录 (默认值：dist)</span><br><span class="line">  -h, --help             输出用法信息</span><br><span class="line"></span><br><span class="line">你也可以使用 vue build 将目标文件构建成一个生产环境的包并用来部署：</span><br><span class="line">vue build MyComponent.vue</span><br><span class="line"></span><br><span class="line">运行以下命令来创建一个新项目</span><br><span class="line">vue create hello-world</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vue create --help</span><br><span class="line">用法：create [options] &lt;app-name&gt;</span><br><span class="line"></span><br><span class="line">创建一个由 `vue-cli-service` 提供支持的新项目</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line"></span><br><span class="line">  -p, --preset &lt;presetName&gt;       忽略提示符并使用已保存的或远程的预设选项</span><br><span class="line">  -d, --<span class="keyword">default</span>                   忽略提示符并使用默认预设选项</span><br><span class="line">  -i, --inlinePreset &lt;json&gt;       忽略提示符并使用内联的 JSON 字符串预设选项</span><br><span class="line">  -m, --packageManager &lt;command&gt;  在安装依赖时使用指定的 npm 客户端</span><br><span class="line">  -r, --registry &lt;url&gt;            在安装依赖时使用指定的 npm registry</span><br><span class="line">  -g, --git [message]             强制 / 跳过 git 初始化，并可选的指定初始化提交信息</span><br><span class="line">  -n, --no-git                    跳过 git 初始化</span><br><span class="line">  -f, --force                     覆写目标目录可能存在的配置</span><br><span class="line">  -c, --clone                     使用 git clone 获取远程预设选项</span><br><span class="line">  -x, --proxy                     使用指定的代理创建项目</span><br><span class="line">  -b, --bare                      创建项目时省略默认组件中的新手指导信息</span><br><span class="line">  -h, --help                      输出使用帮助信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vue ui</span><br><span class="line">npm install -g <span class="meta">@vue</span>/cli-init</span><br><span class="line"># `vue init` 的运行效果将会跟 `vue-cli@<span class="number">2.</span>x` 相同</span><br><span class="line">vue init webpack my-project</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">del /s /q C:\Users\Administrator\AppData\Roaming\npm\ng*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm install es6-promise --save 安装es6支持</span><br><span class="line">npm install vuex --save    安装vuex</span><br><span class="line"></span><br><span class="line">(<span class="meta">@vue</span>/cli) 是一个全局安装的 npm 包，提供了终端里的 vue 命令。</span><br><span class="line">它可以通过 vue create 快速搭建一个新项目，</span><br><span class="line">或者直接通过 vue serve 构建新想法的原型。</span><br><span class="line">你也可以通过 vue ui 通过一套图形化界面管理你的所有项目。</span><br><span class="line"></span><br><span class="line">CLI 服务是构建于 webpack 和 webpack-dev-server 之上的</span><br><span class="line">vue-cli-service ，提供 serve、build 和 inspect 命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#CLI 服务</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> npm&amp;&amp;vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/17/reach%20%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/06/17/reach%20%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="reach-学习"><a href="#reach-学习" class="headerlink" title="reach 学习"></a>reach 学习</h3><h6 id="介绍描述"><a href="#介绍描述" class="headerlink" title="介绍描述"></a>介绍描述</h6><pre><code>1. 用于动态创建用户界面的javascript库(只关注视图)2. 由Facebook开源</code></pre><h6 id="react的特点"><a href="#react的特点" class="headerlink" title="react的特点"></a>react的特点</h6><pre><code>1.声明式编码2.组件化编码3.React Native 编写原生应用4.高效 (优秀的Diffing算法)</code></pre><h6 id="react高效的原因"><a href="#react高效的原因" class="headerlink" title="react高效的原因"></a>react高效的原因</h6><pre><code>1.使用虚拟机(virtual)DOM,不总是直接操作页面真实的DOM2.DOM Diffing算法,最小化页面重绘 </code></pre><h6 id="react依赖"><a href="#react依赖" class="headerlink" title="react依赖"></a>react依赖</h6><pre><code>1. babel.min.js es6转译es5 || jsxl转译js2. react.development.js  react 核心库3. react-dom.development.js 扩展操作dom的拓展库4. prop-types.js</code></pre><h6 id="关于虚拟DMO"><a href="#关于虚拟DMO" class="headerlink" title="关于虚拟DMO"></a>关于虚拟DMO</h6><pre><code>1. 本质是Object类型的对象(一般对象)2. 虚拟DOM比较&quot;轻&quot;,(轻指的是虚拟dom 和真实dom的元素比较，而虚拟dom比真实dom少很多元素),因为虚拟dom是React内部使用,无需真实dom上面那么多元素3. 虚拟dom最终会被React转换为真实Dom,呈现在页面上</code></pre><h6 id="jsx语法"><a href="#jsx语法" class="headerlink" title="jsx语法"></a>jsx语法</h6><pre><code>1. 定义虚拟Dom时，不要写引号2. 标签中混入js表达式时要用&#123;&#125;3. 样式的类名指定不要用class,要用className4. 内联样式，要用style=&#123;&#123;key:value&#125;&#125; 注意当key 是多个单词组成要用小驼峰的方式书写 例如font-size 得写fontSize5. 虚拟dom必须只有一个根标签6. 标签必须闭合 &lt;input /&gt; 或者&lt;input&gt;&lt;/input&gt;7. 标签首字母    (1)若小写字母开头,则将该标签转为html中同名元素,若html中无该标签对应的同名元素，则报错    (2)若大写字母开头,react就会区渲染对应的组件，若组件没有定义,则报错</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;!-- &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt; --&gt;</span><br><span class="line">    &lt;title&gt;练习react&lt;/title&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .aaa&#123;</span><br><span class="line">            background-color: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">        const myId=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">        const MyDom=(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;你好&lt;/h1&gt;</span><br><span class="line">                &lt;span className=<span class="string">&quot;aaa&quot;</span> id=&#123;myId.toLocaleUpperCase()&#125;&gt;哈哈哈&lt;/span&gt;</span><br><span class="line">                &lt;div style=&#123;&#123;fontSize:<span class="string">&quot;50px&quot;</span>,background:<span class="string">&#x27;red&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">                    嘿嘿</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">        ReactDOM.render(MyDom,document.getElementById(<span class="string">&#x27;box&#x27;</span>))</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解析Vue-Cli  request.js拦截过滤器</title>
      <link href="/2023/06/17/%E8%A7%A3%E6%9E%90vue-cli%20%20request.js%E6%8B%A6%E6%88%AA%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2023/06/17/%E8%A7%A3%E6%9E%90vue-cli%20%20request.js%E6%8B%A6%E6%88%AA%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="解析vue-cli-request-js拦截过滤器"><a href="#解析vue-cli-request-js拦截过滤器" class="headerlink" title="解析vue-cli  request.js拦截过滤器"></a>解析vue-cli  request.js拦截过滤器</h1><h5 id="理论分析："><a href="#理论分析：" class="headerlink" title="理论分析："></a>理论分析：</h5><pre><code>    request.js的原理非常简单 整个流程就是一个拦截器把axios原有的东西做了一次封装在发送请求之前配置点东西(请求头之类的)拦截到返回请求的时候做一系列判断要不要返回到页面，同时也可以处理错误code，减少了代码的重复量，有错误就在request.js 中给你弹框了，就不必再每个页面去判断一次错误去弹框</code></pre><h5 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h5><pre><code>**这里强调一下对于新手来说以下东西有些东西你可能不知道是什么，但是为了体现功能不得不用，我会打上批注后续持续更新相关解析** </code></pre><h6 id="1-导入相关依赖"><a href="#1-导入相关依赖" class="headerlink" title="1.导入相关依赖"></a>1.导入相关依赖</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MessageBox</span>, <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span> <span class="comment">//vue常用的web组件库</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span> <span class="comment">//vue中的存储管理仓库</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span> <span class="comment">//这里是一个获取token的一个小工具类</span></span><br></pre></td></tr></table></figure><h6 id="2-创建axios实例"><a href="#2-创建axios实例" class="headerlink" title="2.创建axios实例"></a>2.创建axios实例</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>,<span class="comment">//请求地址</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span> <span class="comment">//超时时间</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="3-request过滤"><a href="#3-request过滤" class="headerlink" title="3.request过滤"></a>3.request过滤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;<span class="comment">//配置请求</span></span><br><span class="line">    <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">token</span>) &#123; <span class="comment">//获取token，后续解析</span></span><br><span class="line">      config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="title function_">getToken</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h6 id="4-response过滤"><a href="#4-response过滤" class="headerlink" title="4.response过滤"></a>4.response过滤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.<span class="property">data</span>  <span class="comment">//这个根据自己后台自定义的返回值合理选择 </span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> != <span class="number">20000</span>) &#123; <span class="comment">//如果不是20000就定做错误</span></span><br><span class="line">      <span class="title class_">Message</span>(&#123;</span><br><span class="line">        <span class="attr">message</span>: res.<span class="property">message</span> || <span class="string">&#x27;Error&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">      &#125;)<span class="comment">//elment 的弹框组件，弹出后台返回的错误信息</span></span><br><span class="line">      <span class="comment">//同时还可以做其他的判断</span></span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">50008</span> || res.<span class="property">code</span> === <span class="number">50012</span> || res.<span class="property">code</span> === <span class="number">50014</span>) &#123;</span><br><span class="line">      <span class="comment">//这也是element 的一个组价对话弹出框</span></span><br><span class="line">        <span class="title class_">MessageBox</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;您已经登出，您可以取消留在此页面，或再次登录，确认登出&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">confirmButtonText</span>: <span class="string">&#x27;重新登入&#x27;</span>,</span><br><span class="line">          <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//重置了一下token</span></span><br><span class="line">          store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/resetToken&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            location.<span class="title function_">reload</span>()</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(res.<span class="property">message</span> || <span class="string">&#x27;Error&#x27;</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Message</span>(&#123;</span><br><span class="line">      <span class="attr">message</span>: error.<span class="property">message</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h6 id="5-导出service"><a href="#5-导出service" class="headerlink" title="5.导出service"></a>5.导出service</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><h6 id="6-完整request-js"><a href="#6-完整request-js" class="headerlink" title="6.完整request.js"></a>6.完整request.js</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MessageBox</span>, <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span> </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// request interceptor</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">token</span>) &#123;</span><br><span class="line">      config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="title function_">getToken</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// response interceptor</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.<span class="property">data</span>  </span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> != <span class="number">20000</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">      <span class="title class_">Message</span>(&#123;</span><br><span class="line">        <span class="attr">message</span>: res.<span class="property">message</span> || <span class="string">&#x27;Error&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">50008</span> || res.<span class="property">code</span> === <span class="number">50012</span> || res.<span class="property">code</span> === <span class="number">50014</span>) &#123;</span><br><span class="line">        <span class="title class_">MessageBox</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;You have been logged out, you can cancel to stay on this page, or log in again&#x27;</span>, <span class="string">&#x27;Confirm logout&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">confirmButtonText</span>: <span class="string">&#x27;Re-Login&#x27;</span>,</span><br><span class="line">          <span class="attr">cancelButtonText</span>: <span class="string">&#x27;Cancel&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/resetToken&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            location.<span class="title function_">reload</span>()</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(res.<span class="property">message</span> || <span class="string">&#x27;Error&#x27;</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Message</span>(&#123;</span><br><span class="line">      <span class="attr">message</span>: error.<span class="property">message</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="7-使用request-js"><a href="#7-使用request-js" class="headerlink" title="7.使用request.js"></a>7.使用request.js</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span><span class="comment">//导入上面的requset.js</span></span><br><span class="line"><span class="comment">//import qs from &#x27;qs&#x27; //序列化对象可以自己搜一下，我这里没用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getAllMessageInfo</span>(<span class="params">pages</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/messageInfo/getAllMessageInfo&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: pages</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="8-页面中使用被过滤过的请求方法"><a href="#8-页面中使用被过滤过的请求方法" class="headerlink" title="8.页面中使用被过滤过的请求方法"></a>8.页面中使用被过滤过的请求方法</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">import</span> &#123;getAllMessageInfo&#125; <span class="keyword">from</span> <span class="string">&quot;@/api/messageInfo/messageInfo&quot;</span><span class="comment">//导入方法</span></span><br><span class="line">  <span class="title function_">okgetAllMessageInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> pages=&#123;&#125;</span><br><span class="line">      pages.<span class="property">current</span>=<span class="variable language_">this</span>.<span class="property">current</span></span><br><span class="line">      pages.<span class="property">size</span>=<span class="variable language_">this</span>.<span class="property">size</span></span><br><span class="line">      <span class="title function_">getAllMessageInfo</span>(pages).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// 如果resonse返回的code是20001就会弹框，因为已经被过滤了</span></span><br><span class="line">      <span class="comment">// 如果response.code不是20000 默认不返回response的，可以自己修改request.js的配置</span></span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(response)<span class="comment">//这里可以做自己想做的事情</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础语法</title>
      <link href="/2023/06/17/vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/06/17/vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vue学习"><a href="#vue学习" class="headerlink" title="vue学习"></a>vue学习</h1><blockquote><p>vue基础语法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;xx&#125;&#125;语法只能使用表达式 e.g&#123;&#123;ok? yes:no&#125;&#125;</span><br><span class="line"></span><br><span class="line">&quot;v-&quot; 相当于一个指令</span><br><span class="line"></span><br><span class="line">v-on:监听DOM &quot;事件&quot; (e.g:change,click)</span><br></pre></td></tr></table></figure><blockquote><p>指令缩写</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v-bind</span><br><span class="line">    v-bind:href=<span class="string">&quot;url&quot;</span></span><br><span class="line">    :href=<span class="string">&quot;url&quot;</span></span><br><span class="line">    :[key]=<span class="string">&quot;url&quot;</span></span><br><span class="line"></span><br><span class="line">v-on</span><br><span class="line">    v-on:click=<span class="string">&quot;dosomething&quot;</span></span><br><span class="line">    @:click=<span class="string">&quot;dosomething&quot;</span></span><br><span class="line">    @[event]=<span class="string">&quot;dosomething&quot;</span>    </span><br></pre></td></tr></table></figure><blockquote><blockquote><p>computed</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;example&quot;</span>&gt;</span><br><span class="line">&lt;p&gt;Original message: <span class="string">&quot;&#123;&#123; message &#125;&#125;&quot;</span>&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Computed reversed message: <span class="string">&quot;&#123;&#123; reversedMessage &#125;&#125;&quot;</span>&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">vm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">el: <span class="string">&#x27;#example&#x27;</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">// 计算属性的 getter</span></span><br><span class="line">    reversedMessage: function () &#123;</span><br><span class="line">    <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
